{"lastUpdate":1722274290977,"outputHash":"3b0bb755c2be94fb222de0b51cc6b307","numberOfLines":3490,"uniqueLines":["function recurseDir(currentPath) {","const fileBuffer = fs.readFileSync(filePath)","crimson: '\\x1b[48m'","blue: '\\x1b[44m',","},","white: '\\x1b[37m',","let lastRowElement = document.createElement('div')","<!DOCTYPE html>","logDelay('Setup live backgrounds')","bg: {","const page = await browser.newPage()","magenta: '\\x1b[45m',","const app = express()","crimson: '\\x1b[38m' // Scarlet","red: '\\x1b[41m',","black: '\\x1b[40m',","green: '\\x1b[42m',","const items = fs.readdirSync(currentPath)","console.log('Generating website')","const updateGrid = () => {","yellow: '\\x1b[43m',","app.use(express.static('./output'))","<html lang=\"en\">","wss.on('connection', (ws) => {","// WebSocket server setup","const wss = new WebSocketServer({ port: 3001 })","for (const post of posts) {","lastRowElement.classList.add('post_row')","<script>","cyan: '\\x1b[46m',","white: '\\x1b[47m',","<!-- will autofill on website load -->","<div id=\"return_link\">","if (dirent.isDirectory()) {","<meta property=\"twitter:title\" content=\"meta title link\" />","return blogPostDirs","ws.lastPong = 0","blogPostDirs = blogPostDirs.concat(getBlogPostDirs(fullPath))","const hashSum = crypto.createHash('md5')","const blogPostDirs = getBlogPostDirs(resolve(__dirname, '..'))","if (message.toString() === 'pong')","<!-- posts link -->","ws.on('message', function (message) {","blogPostDirs.push(fullPath)","logDelay('Found post paths')","<title>Jack's project hub</title>","return hashSum.digest('hex')","return JSON.parse(fs.readFileSync('./mem.json', 'utf8'))","const postsWaitingToGenerate = []","hashSum.update(fileBuffer)","if (dirent.name.startsWith('blogPost_'))","// stat update script link","ws.lastPong = Date.now()","<script> //Controls the grid for the posts","if (dirent.name === 'node_modules')","const maxWidth = wrapper.getBoundingClientRect().width - borderSize * 2","const fullPath = join(dir, dirent.name)","function getBlogPostDirs(dir) {","let blogPostDirs = []","fs.readdirSync(dir, { withFileTypes: true }).forEach(dirent => {","const postPaths = findPostPaths()","let combinedHash = crypto.createHash('md5')","if (post && !postsWaitingToGenerate.includes(post))","<title><!-- title name link --></title>","{","if (acc[acc.length - 1] !== item) acc.push(item)","const posts = Array.from(document.getElementsByClassName('post'))","generateWebsite(postsWaitingToGenerateString).then(() => {","<!-- </div> -->","const server = app.listen(8080, (error) => {","Array.from(document.getElementsByClassName('post')).forEach(post => post.style.width = Math.random() * 250 + 250 + 'px')","updateSite()","if (postsCreated[post] == undefined)","function getFolderHash(startPath) {","permaLines.push(postsWaitingToGenerate)","postsCreated[post] = Date.now()","","waitingToGenerateWebsite = true","Array.from(document.getElementsByClassName('post_row')).forEach(row => row.classList.add('post_row_old'))","if (!generatingWebsite) {","const postsWaitingToGenerateString = JSON.stringify(postsWaitingToGenerate)","</script>","postsWaitingToGenerate.splice(0)","wss.clients.forEach(client => {","return Promise.resolve()","mem.postsCreated = postsCreated","let lastRowWidth = 0","<head>","<a href=\"../../\">Home</a>","codeLines[path].push(item)","waitingToGenerateWebsite = false","chokidar.watch(blogPostDirs, {","<meta charset=\"UTF-8\">","if (fullRegen)","} else","<link rel=\"stylesheet\" href=\"../../postStyles.css\">","let siteMem = {}","let lastChangeTime = 0","console.log(`Screenshotting post: ${post}`)","generatingWebsite = true","generatingWebsite = false","<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">","Array.from(document.getElementsByClassName('post')).forEach(post => post.style.height = Math.random() * 250 + 250 + 'px')","const wrapper = document.getElementById('posts')","const borderSize = 25","for (let key of ['lastScan', 'lastUpdate', 'outputHash', 'numberOfLines', 'uniqueLines', 'orderedLines', 'postsUpdated', 'postsCreated', 'postHashes']) siteMem[key] = mem[key]","persistent: true,","function updateSite(post, fullRegen) {","</div>","updateSite(undefined, true)","postsWaitingToGenerate.push(post)","<meta property=\"og:title\" content=\"meta title link\" />","}).on('all', (event, path) => {","ignoreInitial: true","const postPadding = 10","const path = require('path')","if (client.readyState === 1)","<span onclick=\"window.scroll({top:0,left:0,behavior:'smooth'})\">Return to top</span>","client.send('reload')","if (waitingToGenerateWebsite) {","<meta property=\"og:description\" content=\"meta description link\" />","const previewMode = process.argv.includes('previewMode')","if (!codeLines.includes(item))","</html>","postsWaitingToGenerate.splice(0, postsWaitingToGenerate.length, ...blogPostDirs)","if (event === 'change' || event === 'add' || event === 'unlink') {","(new ((await import('ws')).WebSocket)('ws://localhost:8080')).on('error', (error)=>console.error(error))","lastChangeTime = Date.now()","updateSite(`${path.split('blogPost_')[0]}blogPost_${path.split('blogPost_')[1].split('\\\\')[0]}`)","const watchAll = process.argv.includes('watchAll')","if (stat.isDirectory() && !ignoredPaths.scan.includes(fullPath)) {","if (watchAll)","const server = await new Promise((resolve, reject) => {","chokidar.watch(process.cwd(), {","if (previewMode)","const server = serve({","<div id=\"overlay\">","const express = require('express')","const baseDirectory = './output'","filePath = join(filePath, 'index.html')","<!-- Primary Meta Tags -->","// Serve the file","setupFolder()","async fetch(req) {","</body>","<!-- Open Graph / Facebook -->","const fileHash = hashFileContents(fullPath)","wrapper.appendChild(lastRowElement)","headers: { 'Content-Type': mimeType }","ignored: /node_modules|mem.json|output|\\.git/,","} else if (stat.isFile() && !ignoredPaths.scan.includes(fullPath) && item !== 'preview.png') {","lastRowElement.appendChild(post)","cleanPostsFolder(postPaths)","const fs = require('fs')","const url = new URL(req.url)","let path = decodeURIComponent(url.pathname)","logDelay('Main start')","codeLines[path] = []","logDelay('Cleaned posts folder')","else {","return acc","Array.from(document.getElementsByClassName('post_row_old')).forEach(row => row.remove())","setupLiveBackgrounds(postPaths)","console.log('posts:', JSON.parse(process.argv[process.argv.indexOf('previewMode') + 1]))","const { exec } = require('child_process')","if (path === '/') {","return new Response(file, {","console.error(`File not found: ${filePath}`, error)","JSON.parse(process.argv[process.argv.indexOf('previewMode') + 1]).forEach(postPath => generatePost(postPath, true))","const puppeteer = require('puppeteer')","reject(err)","<meta name=\"title\" content=\"meta title link\" />","}","// Normalize root path to serve index.html","const file = BunFile(filePath)","return new Response('File not found', { status: 404 })","<div id=\"post\">","const mimeType = getMimeType(filePath) || 'application/octet-stream'","let consoleUpdateIndex = 0","return new Response(null, { status: 204 }); // No Content response","const width = post.getBoundingClientRect().width + postPadding * 2","if (path.startsWith('/favicon')) {","path = '/index.html'","lastRowWidth = width","<div id=\"post_background\">","const consoleUpdateChars = '⸺⟋|⟍'","// Handle favicon requests without throwing an error","recurseDir(fullPath)","let lastKeyPressTime = 0","lastRowElement = document.createElement('div')","<!-- Twitter -->","let filePath = join(baseDirectory, path)","lastRowWidth += width","if (lastRowWidth === 0 || lastRowWidth + width < maxWidth) {","document.addEventListener('DOMContentLoaded', updateGrid)","let lastLines = []","function updateConsole() {","let fileContent = fs.readFileSync(path, 'utf8').split('\\r\\n')","logDelay('Setup folder')","<div id=\"returnToTopButton\">","setInterval(() => {","<meta name=\"description\" content=\"meta description link\" />","// Check if the path has an extension to determine if it's a directory","if (client.readyState === 1) // 1 means open","client.send('ping')","window.addEventListener('resize', updateGrid)","// Full file path","if (!extname(filePath)) {","fs.writeFileSync('./output/mem.json', JSON.stringify(siteMem), 'utf8')","postPaths.forEach(postPath => generatePost(postPath))","lines.push(`${colors.fg.green}CHANGE DETECTED${colors.reset}`)","if (waitingToGenerateWebsite)","const numberOfConnections = Array.from(wss.clients).filter(ws => Date.now() - ws.lastPong < 1000).length","saveAndCopyStats(true || !previewMode)","reject(error)","<!-- post link -->","lines.push(`${colors.fg.cyan}Watching ${colors.fg.yellow}${blogPostDirs.length}${colors.fg.cyan} post${blogPostDirs.length === 1 ? '' : 's'}: ${blogPostDirs.map(path => `${colors.fg.yellow}${path.split('blogPost_')[1]}`).join(`${colors.fg.cyan}, `)}${colors.reset}`)","items.forEach(item => {","lines.push(`${numberOfConnections === 0 ? colors.fg.red : colors.fg.green}There ${numberOfConnections === 1 ? 'is' : 'are'} ${numberOfConnections} connected websocket${numberOfConnections === 1 ? '' : 's'} for live previewing${colors.reset}`)","lines.push(`${colors.fg.cyan}Hosting site at ${colors.fg.yellow}${colors.underscore}${server.url}${colors.reset}`)","exec(command, options, (error, stdout, stderr) => {","<script src=\"./updateStats.js\"></script>","lines.push(`${colors.bright}[${colors.fg.magenta}${consoleUpdateChars[consoleUpdateIndex]}${colors.fg.white}] LIVE PREVIEW [${colors.fg.magenta}${(consoleUpdateChars[(4 - consoleUpdateIndex) % 4])}${colors.fg.white}]${colors.reset}`)",";","lines.push(`${colors.fg.yellow}GENERATING FOLDER${colors.reset}`)","if (watchAll) lines.push(`${colors.fg.cyan}Watching ${colors.fg.yellow}${process.cwd()}${colors.reset}`)","if (generatingWebsite)","logDelay('Generated posts')","const stat = fs.statSync(fullPath)","<meta property=\"og:image\" content=\"https://jacks-project-hub.vercel.app/preview.png\" />","const fullPath = path.join(currentPath, item)","if (Date.now() - lastChangeTime < 1000)","if (Date.now() - lastKeyPressTime < 1000)","return new Promise((resolve, reject) => {","canvas.style.filter = 'blur(0px)'","const lines = []","content=\"THE place to read about all of my projects, with exclusive content not seen elsewhere!\" />","lines.push(...permaLines)","lines.push(`${colors.fg.red}WAITING TO REGENERATE FOLDER${colors.reset}`)","function saveMem(mem) {","logDelay('Saved stats')","if (error)","lines.push(`${colors.bright}Press CTRL+c to exit${colors.reset}`)","(async () => {","if (Date.now() - log.time > 1000)","logDelay('Generated main page')","[...spawnLogs].forEach(log => {","lines.push(`[SPAWN ${log.type.toUpperCase()}] ${log.message}`)","spawnLogs.splice(spawnLogs.indexOf(log), 1)","if (lines.length <= index)","lastLines.forEach((line, index) => {","lines.forEach((line, index) => {","process.stdout.write(`\\x1b[${index + 1};0H \\x1b[2K`)","process.stdout.write(`\\x1b[${index + 1};0H \\x1b[2K${line}`)","const { spawn } = require('bun')","function execAsync(command, options) {","<div id=\"info\">","combinedHash.update(fileHash)","<script src=\"./backgroundManager.js\"></script>","lastLines = lines","fs.writeFileSync('./mem.json', JSON.stringify(mem), 'utf8')","generateMainPage(postPaths, previewMode)","saveMem(mem)","if (line !== lastLines[index]) {","consoleUpdateIndex = (consoleUpdateIndex + 1) % 4","process.stdout.write('\\x1b[?25l')","process.stdout.write('\\x1B[2J\\x1B[0f')","setInterval(updateConsole, 100)","await generateLinkPreviews()","function generatePost(postPath, injectLivePreview) {","if (!previewMode) {","updateConsole()","//some helper functions to make more readable code","readline.emitKeypressEvents(process.stdin)","function script() {","<meta property=\"twitter:description\" content=\"meta description link\" />","})","color: '#0f0',","* charAt + toLowerCase","tabSize: 3,","//the script injected into the output html","if (part.includes(']')) return [[part.slice(0, part.indexOf(']'))], part.slice(part.indexOf(']') + 1)]","resolve(stdout || stderr)","<meta property=\"og:image\" content=\"meta image link\" />","function setValue(key, value) {","let codeLines = {}","total += countLinesOfCode(fullPath)","if (part.slice(0, 1) == '|') return '|[' + part.slice(1)","canvas.style.transition = 'all 0s'","window.markup = {","}).flat(1).reduce((acc, part) => {","lastKeyPressTime = Date.now()","function countLinesOfCode(directory = './') {","return part","}, [])) {","const readline = require('readline')","return (sessionStorage.getItem('markup') != undefined ? JSON.parse(sessionStorage.getItem('markup')) : {})[key]","<meta property=\"og:url\" content=\"meta url link\" />","function getMem() {","inPar = part.indexOf(')') == -1 && inPar","if (process.stdin.isTTY)","const http = require('http')","strike: false","function err(message) {","const files = fs.readdirSync(directory)","recurseDir(startPath)","stripTags(rawMarkup) {","document.addEventListener('DOMContentLoaded', () => {","if (outputHashChanged || missingMainPreview) {","process.stdin.setRawMode(true)","folder(event) {","smartMakeDir(`./output/posts/${name}`)","process.stdin.on('keypress', (str, key) => {","[...wrapper.getElementsByClassName('folder')].forEach(folder => {","function getValue(key) {","<meta property=\"twitter:card\" content=\"summary_large_image\" />","process.chdir('C:\\\\Users\\\\jack\\\\Home\\\\Programming\\\\blog projects\\\\blog generator')","else","<meta property=\"og:type\" content=\"website\" />","const children = folder.children","logDelay('Generated link previews')","if (typeof part == 'string')","}, [])","if (!['script.txt', 'title.txt', 'preview.txt'].includes(file)) {","inPar = part.indexOf('(') > part.indexOf(')')","*/","logDelay.log()","return combinedHash.digest('hex')","<meta property=\"twitter:url\" content=\"https://jacks-project-hub.vercel.app/\" />","<meta property=\"twitter:title\" content=\"Jack's project hub\" />","<meta property=\"twitter:description\"","return out.join('; ') + ';'","* @param {Number} scale","<meta property=\"twitter:image\" content=\"https://jacks-project-hub.vercel.app/preview.png\" />","acc[acc.length - 1] += part","console.log('Website generated in', Date.now() - startTime, 'ms')","process.exit(0)","console.log('Generating website.')","const chokidar = require('chokidar')","process.stdout.write(`\\x1b[0;0H \\x1b[2K`)","italic: false,","console.log('Taking preview screenshots.')","if (key.ctrl && key.name === 'c') {","function splitMarkup(rawMarkup) {","const { resolve, join, extname } = require('path')","delete saveData[key]","if (acc.length > 0 && typeof acc[acc.length - 1] == 'string') {","item = item.trim()","function generateMainPage(postPaths, injectLivePreview) {","part = part.filter(item => item != '')","process.exit()","<meta property=\"og:url\" content=\"https://jacks-project-hub.vercel.app/\" />","if (getValue(`id_${folder.dataset.id}`) != undefined) {","const open = getValue(`id_${folder.dataset.id}`)","event.stopPropagation()","await spawn({","import { serve, file as BunFile } from 'bun'","* slice + toLowerCase","cmd: ['bun', 'generateWebsite.js']","console.log('Screenshotting main page.')","throw new Error(`Error parsing markup: ${message}`)","const open = children[1].style.display == 'none'","}).exited","import { lookup as getMimeType } from 'mime-types'","return [...acc, part]","let saveData = sessionStorage.getItem('markup') != undefined ? JSON.parse(sessionStorage.getItem('markup')) : {}","<meta property=\"twitter:image\" content=\"meta image link\" />","else if (lastFileHashes[key] != fileHashes[key])","const fullPath = path.join(directory, file)","if (lastFileHashes[key] == undefined)","Object.keys(fileHashes).forEach(key => {","let total = 0","changedFiles.push(key)","defaultStyle: {","let lastPing = 0","process.stdout.write('\\x1b[?25h')","if (part.length == 0)","part = part.map(part => part.split(' ')).flat()","let ws","bold: false,","const name = postPath.split('blogPost_')[1]","addedFiles.push(key)","<div id=\"content\">","<meta property=\"twitter:url\" content=\"meta url link\" />","let inPar = false","function heartbeat() {","<canvas id=\"backgroundCanvas\"></canvas>","<meta property=\"og:description\"","if (stats.isDirectory() && !ignoredPaths.count.includes(fullPath)) {","align: 'left',","function removeKey(key) {","if (Date.now() - lastPing >= 1000) {","console.log('Website generated.')","while (part.some(part => part.includes(' ')))","<meta name=\"description\"","size: 'medium',","ws.onmessage = (event) => {","await page.goto(`http://localhost:8080/index.html`);","await page.screenshot({ path: './output/preview.png' })","/**","const browser = await puppeteer.launch()","<div class=\"scrollOffset\"></div>","saveData[key] = value","import { WebSocketServer } from 'ws'","code: false,","removedFiles.push(key)","showMarkup: false,","(await page.target().createCDPSession()).send('Network.clearBrowserCache')","fs.readdirSync(postPath).forEach(file => {","<meta property=\"og:title\" content=\"Jack's project hub\" />","part = part.reduce((acc, part) => {","if (fs.statSync(`${postPath}/${file}`).isDirectory())","}, []).filter(part => part != '')","acc[acc.length - 1] += ' ' + part","<body>","translate(rawMarkup, scale = 1, classes = []) {","Object.keys(lastFileHashes).forEach(key => {","</head>","const fileHashes = mem.fileHashes","if (fileHashes[key] == undefined)","(() => {","const totalChanges = addedFiles.length + changedFiles.length + removedFiles.length","out.push(`font-weight:${value ? 'bold' : 'normal'}`)","fileContent.forEach(item => {","<div id=\"titleText\">","Jack's project hub","const showSpawnLogs = process.argv.includes('logSpawn')","red: '\\x1b[31m',","ws = new WebSocket('ws://localhost:3001')","else acc = [...acc, part]","let removedFiles = []","let nextGlobalId = 0 //used for anything that needs a unique identifier","if (part.indexOf('(') > -1)","const lca = (str, i) => str.charAt(i).toLowerCase()","const ls = (str, start, stop) => str.slice(start, stop).toLowerCase()","let changedFiles = []","while (item.split(' ').length > 1)","module.exports = {","let addedFiles = []","if (inPar)","else if (key == 'bold')","sessionStorage.setItem('markup', JSON.stringify(saveData))","const folder = event.target.closest('.folder')","Object.keys(style).forEach(key => {","* @returns HTML","const markup = splitMarkup(rawMarkup)","setValue(`id_${folder.dataset.id}`, open)","if (scale == 1)","if (event.data === 'reload') location.reload()","else if (event.data === 'ping' && ws.readyState == 1) {","<!-- title markup link -->","files.forEach(file => {","children[0].innerHTML = children[0].innerHTML.replace(open ? 'open' : 'close', open ? 'close' : 'open')","return splitMarkup(rawMarkup).map(item => typeof item === 'string' ? item : item.filter(subItem => subItem === 'break').map(() => '<br>').join('')).join('')","server.on('error', (err) => {","const wrapper = document.currentScript.parentNode","lastPing = Date.now()","else if (key == 'size')","const colors = {","const lastFileHashes = mem.lastFileHashes ?? {}","for (const post of [...changedPosts, ...postsMissingPreview].sort().reduce((acc, item) => {","let out = []","children[1].style.display = open ? '' : 'none'","resolve(server)","out.push(`font-size:calc(${value} * ${scale})`)","<link rel=\"stylesheet\" href=\"./siteStyles.css\">","if (window.markup == undefined) {","if (defaultStyle[key] != style[key]) {","const stats = fs.statSync(fullPath)","black: '\\x1b[30m',","let mem = JSON.parse(fs.readFileSync('./mem.json', 'utf8'))","<div id=\"posts\">","item = item.split(' ').join(' ')","out.push(`font-size:${value}`)","return rawMarkup.split('<').join('&lt').split('\\r\\n').filter(line => line.slice(0, 10) != '|[COMMENT]').join('').split('|[').filter(part => part != '').map(part => {","<meta name=\"title\" content=\"Jack's project hub\" />","//used so I can check nextProp without it existing","let commitMessage","* @param {String} rawMarkup","const value = style[key]","if (removedFiles.length > 0) changes.push(`removed ${removedFiles.length} file${removedFiles.length == 1 ? '' : 's'}: ${removedFiles.join(', ')}`)","let folds = []","else if (key == 'strike')","* @param {String[]} classes any classes to add to the wrapper","out.push(`text-decoration: ${value ? 'line-through' : 'none'}`)","if (changedFiles.length > 0) changes.push(`changed ${changedFiles.length} file${changedFiles.length == 1 ? '' : 's'}: ${changedFiles.join(', ')}`)","let defaultStyle = { ...this.defaultStyle }","const emptyString = new Array(2 ** 16).fill(' ').join('')","} else if (stats.isFile() && !ignoredPaths.count.includes(fullPath))","total += fs.readFileSync(fullPath, 'utf8').split('\\r\\n').length","* Translates markup into html.","ws.send('pong')","let needScript = false","//This line causes a crash with bun, but will make the websites auto reconnect when bun stops crashing.","out.push(`font-style:${value ? 'italic' : 'normal'}`)","if (totalChanges == 0) {","codeLines.push(item)","spawnLogs.push(...new TextDecoder().decode(chunk).split('\\n').filter(message => message !== '').map(message => ({ message, time: Date.now(), type: 'error' })))","setTimeout(heartbeat, 100)","function cssRuleFromStyles(defaultStyle, style, scale = 1) {","let style = { ...defaultStyle }","heartbeat()","await page.reload({ waitUntil: ['networkidle0'], bypassCache: true })","fg: {","let lastAlign","if (addedFiles.length > 0) changes.push(`added ${addedFiles.length} file${addedFiles.length == 1 ? '' : 's'}: ${addedFiles.join(', ')}`)","if (key == 'color')","if (error) {","else if (key == 'italic')","out.push(`color:${value}`)","return","green: '\\x1b[32m',","let changes = []","console.log('No changes')","if (style.align != lastAlign) {","function scanDirectory(directory) {","smartCopyDir(`${postPath}/${file}`, `./output/posts/${name}/${file}`, { recursive: true })","style.bold = false","let permaLines = []","if (stats.isDirectory() && !ignoredPaths.scan.includes(fullPath)) {","style.bold = true","html += `<span style=\"${cssRules}\">${nextLine}</span>`","for await (const chunk of process.stdout)","let generatingWebsite = false","else if (lowerProp == 'space') {","let html = ''","commitMessage = changes[0]","if (lastAlign != undefined)","if (changes.length == 1) {","} else commitMessage = `${totalChanges} changes: ${changes.join(', ')}`","commitMessage = commitMessage.charAt(0).toUpperCase() + commitMessage.slice(1)","fs.accessSync(path.join('./', '.git'))","dim: '\\x1b[2m',","try {","process.chdir('.\\\\output')","style.italic = !style.italic","// Check if .git directory exists, if not, initialize a new repository","await execAsync(`git commit -m \"${commitMessage}\"`, { cwd: './' })","else err(`invalid hex code`)","else if (lowerProp == 'script' && nextProp != undefined) {","html += nextLine","style.italic = false","// Force push the changes to the remote repository","markup.forEach(props => {","let codeLines = []","let nextLine = ''","cmd: ['bun', 'generateWebsite.js', 'previewMode', postsWaitingToGenerateString],","style.color = nextProp.slice(0, 7).toLowerCase()","let wrapperStyle = cssRuleFromStyles({}, defaultStyle, scale)","wrapperStyle += [","nextLine += `<script src=\"${nextProp}\"></script>`","if (nextLine != '') {","if (style.code) nextLine = `<code>${nextLine}</code>`","blue: '\\x1b[34m',","smartCopyFile('./postBackgroundManager.js', `./output/posts/${name}/backgroundManager.js`)","// Commit the changes","await execAsync('git push -f origin main', { cwd: './' })","if (nextProp.slice(7, 9).toLowerCase() == 'ff') //check if alpha is needed","} catch {","'word-wrap:break-word',","'padding:0',","if (typeof props == 'string') {","lastAlign = style.align","html += `<div style=\"text-align:${style.align};\">`","return total","let html = fs.readFileSync('./output/index.html', 'utf8')","'margin:0',","mem.lastFileHashes = fileHashes","console.log(commitMessage)","'width:100%',","function getUniqueLinesOfCode() {","await execAsync(`git remote add origin https://github.com/AlgorithmAiden/jacks_project_hub.git`, { cwd: './' })","style.bold = !style.bold","const scriptString = script.toString().slice(12).split('\\r\\n').reduce((acc, part) => acc + '; ' + part.split('//')[0], '').split('').reduce((acc, part, index, arr) => {","scanDirectory(fullPath)","].join('; ') + ';'","'height:100%'","style.color = ('#' + lca(nextProp, 1) + lca(nextProp, 3) + lca(nextProp, 5) + lca(nextProp, 7)).toLowerCase()","} else if (stats.isFile() && !ignoredPaths.scan.includes(fullPath))","html += text","if (style.code) text = `<code>${text}</code>`","const count = Math.round(Number(nextProp))","let text = nextLine + props","if (index >= arr.length - 3) return acc","// Ensure the main branch exists","scanDirectory('./')","nextLine += new Array(this.tabSize).fill('&nbsp;').join('')","} catch (error) {","return acc + part + '; '","if (acc.slice(acc.length - 2) == '; ' && part == '') return acc","return `","${html}","await execAsync(`git init`, { cwd: './' })","fs.writeFileSync('../mem.json', JSON.stringify(mem), 'utf8')","} else {","const cssRules = cssRuleFromStyles(defaultStyle, style, scale)","spawnLogs.push(...new TextDecoder().decode(chunk).split('\\n').filter(message => message !== '').map(message => ({ message, time: Date.now(), type: 'log' })))","await page.screenshot({ path: `./output/posts/${post}/preview.png` })","await execAsync(`git checkout main`, { cwd: './' })","await execAsync(`git checkout -b main`, { cwd: './' })","function readFile(path) {","await page.goto(`http://localhost:8080//posts/${post}/index.html`);","fs.writeFileSync('./output/index.html', html, 'utf8')","function getOrderedLinesOfCode() {","}, '').split('{; ').join('{').split('; }').join('}').split('; ').reduce((acc, part) => {","readFile(fullPath)","nextLine = ''","if (cssRules.length == 1) //take the ; into account","html = html.replace('<!-- posts link -->', postPaths.map(postPath => generatePostCard(postPath)).join('\\n '))","if (part == ' ' && acc.charAt(acc.length - 1) == ' ')","// Add all changes to staging","for await (const chunk of process.stderr)","return acc + part","await browser.close()","return codeLines","smartCopyFile(`${postPath}/${file}`, `./output/posts/${name}/${file}`)","await execAsync(`git add .`, { cwd: './' })","if (logDelay.logs === undefined) logDelay.logs = []","codeLines = codeLines.sort(() => Math.random() * 2 - 1)","// fs.copyFileSync = wrapFunction(fs.copyFileSync, (...args) => console.log('copy', ...args))","await process.exited","This markup uses tags in |[] clumps mixed with text to style.","html = html.split('meta title link').join(`${name} - Jack's project hub`)","if (logDelay.lastLog === undefined) logDelay.lastLog = logDelay.start","} else if (ls(nextProp, 0, 3) == 'rgb') {","const digits = nextProp.toLowerCase().slice(lca(nextProp, 3) == 'a' ? 5 : 4).split(')')[0].split(',').map(digit => Math.max(0, Math.min(255, Math.round(Number(digit.trim())))).toString(16).padStart(2, '0')).filter((digit, index) => digit != 'ff' || index != 3)","else if (lowerProp == 'bold') {","<div class=\"${['markup', ...classes].join(' ')}\" style=\"${wrapperStyle}\">${needScript ? `\\r\\n<script>${scriptString}</script>` : ''}","}, '')","if (lca(nextProp, 1) == lca(nextProp, 2) && lca(nextProp, 3) == lca(nextProp, 4) && lca(nextProp, 5) == lca(nextProp, 6) && lca(nextProp, 7) == lca(nextProp, 8)) //check if the color can be shortened","let html = fs.readFileSync('./blankPost.html', 'utf8')","html += `<span style=\"${cssRules}\">${text}</span>`","the text is evaluated from beginning to end, any text being rendered using the current style.","})()","const startTime = Date.now()","let dontCount = []","const prop = props[index]","reset: '\\x1b[0m',","to change the style, add |[] with tags and values inside, this sets the style for everything after, until changes.","// return (...args) => {","else if (['off', 'false'].includes(nextProp.toLowerCase()))","tags are found by scanning for |[ and reading until ], and are separated by spaces.","const nextProp = props[index + 1] ?? emptyString","let dontPath = []","tags are evaluated by order they appear, in a |[].","to render a |[ you can put |[|, this will not read tags like normal.","let paths = fs.readFileSync('./ignoredPaths.txt', 'utf8').split('\\r\\n')","fs.rmSync(`${to}/${file}`, { recursive: true, force: true })","console.error('Error pushing changes to GitHub:', error)","server.close()","const logDelay = (...args) => {","you can put ] anywhere, and unless it is closing a tag area it will render.","values in the second column with a [] signify that you put a value there (but don't include the [])","a !-> in the second column indicates the action that happens if non of the other options are there","// func(...args)","values in the second column with a ?[] signify that the value is optional","if (style.showMarkup)","if (fs.existsSync(`${postPath}/title.txt`)) title = markup.translate(fs.readFileSync(`${postPath}/title.txt`, 'utf8'), 1 / 4)","html = html.replace('// stat update script link', `const postName = '${name}'\\r\\n${fs.readFileSync('./updatePostStats.js', 'utf8')}`.split('\\r\\n').join('\\r\\n '))","resolve()","<div class=\"title\">","for (let index = 0; index < props.length; index++) {","html = html.replace('<!-- title markup link -->', title)","if (count > 0 && !isNaN(count))","// function wrapFunction(func, prefunc) {","else if (nextProp.length == 9) //is in format #rrggbbaa","paths.forEach(path => {","}).on('error', () => { })","the tags are below, items in the first column are the keywords, items in the second column are values to be used.","if (digits.every(digit => digit.charAt(0) == digit.charAt(1)))","logDelay.logs.push([Date.now() - logDelay.start, Date.now() - logDelay.lastLog, ...args])","await new Promise(resolve => {","html = html.split('meta url link').join(`https://jacks-project-hub.vercel.app/posts/${name}/`)","logDelay.lastLog = Date.now()","// prefunc(...args)","nextLine += `|[${props.join(' ')}]`","* color: -> sets the text color to the most efficient hex value that represents prop 1","if (lowerProp == 'color') {","else if (lowerProp == 'italic') {","cyan: '\\x1b[36m',","}, 100)","html = html.replace('<!-- post link -->', markup.translate(fs.readFileSync(`${postPath}/script.txt`, 'utf8')))","else if (lowerProp == 'tab') {","logDelay.start = Date.now()","* * #[rgba]","* * #[rgb] -> each range is in the value 0-f in base 16","let waitingToGenerateWebsite = false","const lowerProp = prop.toLowerCase()","* * #[rrggbb]","* * rgb([r],[g],[b]) -> each value is in the range 0-255","* * !-> sets color to the default color","else if (fs.statSync(`${to}/${file}`).isDirectory())","* * #[rrggbbaa]","if (fs.existsSync(`${postPath}/title.txt`)) title = markup.translate(fs.readFileSync(`${postPath}/title.txt`, 'utf8'))","* * rgb([r],[g],[b],[a])","server.on('close', resolve)","* * rgba([r],[g],[b])","else if (lowerProp == 'break') {","if (ls(nextProp, 0, 1) == '#') { //must be hex","// }","* italic: -> sets whether text will be italic","* * on | true","if (nextProp.length == 4) //is in format #rgb","if (path.slice(0, 2) == '//') return","* * rgba([r],[g],[b],[a])","* space: -> adds [number] spaces using '&nbsp;' after","style.color = '#' + digits.reduce((acc, digit) => acc + digit.charAt(0), '')","* bold: -> sets whether text will be bold","else if (nextProp.length == 5) //is in format #rgba","style.color = nextProp.toLowerCase()","if (ls(nextProp, 4, 5) == 'f') //check if alpha is needed","* * !-> toggles italics","if (lca(nextProp, 1) == lca(nextProp, 2) && lca(nextProp, 3) == lca(nextProp, 4) && lca(nextProp, 5) == lca(nextProp, 6)) //check if the color can be shortened","logDelay('Program start')","scan(`${to}/${file}`, `${from}/${file}`)","* tabs: -> adds [number] spaces * tabSize (defaults to 3) after","`","else if (nextProp.length == 7) //is in format #rrggbb","* * !-> defaults to 1","logDelay.log = () => {","nextLine += new Array(count).fill('&nbsp;').join('')","logDelay.logs.forEach(log => console.log(...log))","const text = markup.stripTags(fs.readFileSync(`${postPath}/preview.txt`, 'utf-8'))","const count = Math.round(Number(nextProp) * this.tabSize)","style.color = ls(str, 0, 4)","if (!fs.existsSync(`${from}/${file}`) && !['backgroundManager.js', 'index.html', 'preview.png'].includes(file))","// fs.writeFileSync = wrapFunction(fs.writeFileSync, (to) => console.log('write', to))","style.color = '#' + digits.reduce((acc, digit) => acc + digit, '')","style.color = ('#' + lca(nextProp, 1) + lca(nextProp, 3) + lca(nextProp, 5)).toLowerCase()","* * off | false","${fs.readFileSync('./livePreviewInjection.js', 'utf-8')}","err('invalid rgb')","const ignoredPaths = (() => {","const process = spawn({","* * [number]","html = html.split('meta image link').join(`https://jacks-project-hub.vercel.app/posts/${name}/preview.png`)","const crypto = require('crypto')","nextLine += '&nbsp;'","style.color = defaultStyle.color","function scan(to, from) {","* * !-> toggles bold text","* break: -> used to make new lines","if (['on', 'true'].includes(nextProp.toLowerCase()))","fs.writeFileSync(`./output/posts/${name}/index.html`, html, 'utf8')","style.italic = true","let dontScan = []","const livePreviewInjection = `","bright: '\\x1b[1m',","* * !-> just adds <br>","nextLine += `<div style=\"display:block; height:${Number(nextProp)}em; line-height:${Number(nextProp)}em;\"></div>`","* * [number] -> creates a break and then inserts a blank line of [number] lines in height, then second break","const markup = require('./markup.js')","for (const file of fs.readdirSync(to))","logDelay('Imported modules')","dontCount.push(line)","* size: -> sets the text size","return { scan: dontScan, count: dontCount, path: dontPath }","if (Number(nextProp) > 0)","if (injectLivePreview) html += livePreviewInjection","let spawnLogs = []","${title}","smartCopyFile('./blankSite.html', './output/index.html')","await page.waitForSelector('#backgroundCanvas')","if (Object.keys(defaultStyle).includes(nextProp.toLowerCase()))","* * xx-small | x-small | smaller | small | medium | large | larger | x-large | xx-large -> uses the default sizes","if (!exists)","fs.rmSync(`./output/posts/${file}`, { recursive: true, force: true })","smartCopyFile('./siteStyles.css', './output/siteStyles.css')","fs.mkdirSync(path.dirname(to), { recursive: true, force: true })","html = html.split('meta description link').join(text.length < 100 ? text : text.slice(0, 97) + '...')","} else if (prefix == '3') {","else if (lowerProp == 'reset') {","if (['xx-small', 'x-small', 'smaller', 'small', 'medium', 'large', 'larger', 'x-large', 'xx-large'].includes(nextProp.toLowerCase()))","style.align = defaultStyle.align","let title = name","html += '</div>'","if (prefix == '0') {","* * [number] -> (viewport width + viewport height) / 2 * [number], [number] is in the range [number] >= 0.02","html = html.replace('<!-- title name link -->', name)","* * !-> sets size to the default size","style.size = `${Number(nextProp)}px`","hidden: '\\x1b[8m',","style[nextProp.toLowerCase()] = defaultStyle[nextProp.toLowerCase()]","* code: -> sets whether text will be code using <code></code>","smartCopyFile('./postStyles.css', './output/postStyles.css')","style.size = nextProp.toLowerCase()","for (const file of fs.readdirSync('./output/posts'))","else if (lowerProp == 'default') {","if (nextProp.toLowerCase() == 'global')","if (!postPaths.includes(file))","const line = path.slice(2)","document.head.appendChild(script)","const prefix = path.slice(0, 1)","if (currentBackground.start != undefined) await currentBackground.start(canvas, ctx)","loadedBackgrounds.push(backgroundPaths[backgroundIndex])","scan(`./output/posts/${name}`, postPath)","* align: -> sets which direction text should align (changing align triggers a break)","dontPath.push(line)","smartCopyFile('./updateHomeStats.js', './output/updateStats.js')","else if (lowerProp == 'size') {","for (const file of ['script.txt', 'title.txt', 'preview.txt'])","mixPaths()","* * left | center | right","function findPostPaths() {","else if (Number(nextProp) > 0)","Object.keys(defaultStyle).forEach(key => style[key] = defaultStyle[key])","smartCopyFile('./firaCode.ttf', './output/firaCode.ttf')","postPaths = postPaths.map(post => post.split('blogPost_')[1])","nextLine += '<br>'","postPaths.forEach(async postPath => {","Object.keys(style).forEach(key => this.defaultStyle[key] = style[key])","underscore: '\\x1b[4m',","if (['open', 'close'].includes(nextProp.toLowerCase())) {","style.code = false","* * !-> toggles code text","style.size = defaultStyle.size","* * !-> sets align to the default align","do backgroundPaths.sort(() => Math.random() * 2 - 1)","* reset:","Object.keys(style).forEach(key => defaultStyle[key] = style[key])","else if (lowerProp == 'code') {","style.code = true","needScript = true","* default: -> changes the default used for many tags, but does not change the default retrospectively","const backgroundPaths = []","function setupLiveBackgrounds(postPaths) {","function generatePostCard(postPath) {","style.align = nextProp.toLowerCase()","* * [property] -> sets [property] to the default [property]","let html = `<div class=\"post\" onclick=\"window.location.href='./posts/${name}/'\">`","else if (lowerProp == 'fold') {","while (backgroundPaths.length > 1 && backgroundPaths[0] == lastPath)","if (cycle && minTimePerBackground - (Date.now() - backgroundStarted) <= blurTime && !blurred) {","clearInterval(interval)","fs.rmSync(`./output/posts/${name}/${file}`, { recursive: true, force: true })","if (fs.existsSync(`${postPath}/background.js`)) {","blink: '\\x1b[5m',","let foldId = folds.length + 1","async function generateLinkPreviews() {","if (['left', 'center', 'right'].includes(nextProp.toLowerCase()))","currentBackground = await import(backgroundPaths[backgroundIndex])","if (fs.existsSync(`${postPath}/preview.txt`)) html += markup.translate(fs.readFileSync(`${postPath}/preview.txt`, 'utf8'), 1, ['preview'])","backgroundPaths.push(`./posts/${postPath.split('blogPost_')[1]}/background.js`)","* * !-> resets the full style to the default style","smartMakeDir('./output/posts')","if (line.slice(0, 26) == '//includeInHomeBackgrounds')","html += `","canvas.classList.add('blur')","if (!exists || fs.statSync(from).mtime.getTime() !== fs.statSync(to).mtime.getTime()) {","async function generateWebsite(postsWaitingToGenerateString) {","style.code = !style.code","fs.readFileSync(`${postPath}/background.js`, 'utf8').split('\\r\\n').forEach(line => {","blurred = true","let backgroundIndex = -1","backgroundPaths.push(...fs.readdirSync('./mainPageBackgrounds').map(path => `./backgrounds/${path}`))","smartMakeDir('./output/backgrounds')","if (fs.existsSync(`./output/posts/${name}/${file}`))","* image: -> embeds an image in the next line","* * !-> sets the default style to the current style","while (rawMarkup.includes(`fold_${foldId}`))","let outputHashChanged = false","* * [path] !-> defaults to 1","* * !-> closes a fold","getOutputPaths(fullPath, out)","else if (lowerProp == 'align') {","folds.push({","foldId++","dontScan.push(line)","if (showSpawnLogs) {","script.type = 'module'","yellow: '\\x1b[33m',","const cssRules = cssRuleFromStyles(defaultStyle, fold.style, scale)","fs.copyFileSync(from, to)","smartCopyDir('./mainPageBackgrounds', './output/backgrounds')","let text = `|[click to ${fold.open ? 'close' : 'open'}]`","function saveAndCopyStats(updateLines) {","function smartCopyFile(from, to) {","smartRemoveExtra('./output/backgrounds', backgroundPaths.map(path => path.slice(14)))","text = `<span style=\"${cssRules}\">${text}</span>`","let backgroundStarted = 0","stderr: 'pipe'","* * [path] [size] -> size is relative to the div, so a size of 1 would fill the space, or a size of .5 could fit two images side by side","* * global -> sets the global default, this is the default used to generate the local (the default always used) default, also sets the local default","const postPaths = []","if (cycle && Date.now() - backgroundStarted >= minTimePerBackground) {","stdout: 'pipe',","const blurTime = 1000 * 1","* fold: -> creates foldable content, with all content until the fold close being inside (fold triggers a break)","style: { ...style },","* * open | close -> starts a fold that is open | closed at start","* * [path] -> where to find the script","magenta: '\\x1b[35m',","if (backgroundIndex == 0) mixPaths()","const exists = fs.existsSync(to)","if (cssRules.length != 1)","id: foldId,","} else if (prefix == '1') {","html += `fold_${foldId}`","if (currentBackground.stop != undefined) await currentBackground.stop(canvas, ctx)","if (res.statusCode === 200) {","* video: -> embeds a video in the next line","} else if (stat.isFile() && !ignoredPaths.path.includes(fullPath))","reverse: '\\x1b[7m',","function hashFileContents(filePath) {","} else if (prefix == '2') {","await page.evaluate(() => {","let blurred = false","console.log('Screenshots taken.')","fs.readdirSync('../').forEach(projectDiv => {","* * !-> toggles","const canvas = document.getElementById('backgroundCanvas')","* showMarkup: -> sets whether the markup tags will be hidden (defaults to false)","open: nextProp.toLowerCase() == 'open'","script.src = backgroundPaths[backgroundIndex]","const changedPosts = []","html = html.slice(0, html.indexOf(`fold_${fold.id}`))","* COMMENT: -> \"comments\" out the line, must be alone in the tag bracket, and the first thing in the line: |[COMMENT]","return html","const mem = getMem()","if (stat.isDirectory() && !ignoredPaths.path.includes(fullPath)) {","const newHash = getFolderHash('./output')","function smartCopyDir(from, to) {","lastAlign = undefined //to make the next line trigger a new block","if (!loadedBackgrounds.includes(backgroundPaths[backgroundIndex])) await new Promise(r => {","script.onload = r","http.get('http://localhost:8080', (res) => {","if (!fs.existsSync(path))","fs.writeFileSync('./output/backgroundManager.js', `const backgroundPaths = ${JSON.stringify(backgroundPaths)};\\r\\n${fs.readFileSync('./siteBackgroundManager.js', 'utf8')}`, 'utf8')","await page.setViewport(await page.evaluate(() => ({","const interval = setInterval(() => {","const fold = folds.pop()","const missingMainPreview = !fs.existsSync('./output/preview.png')","mem.lastUpdate = Date.now()","if (mem.outputHash != newHash) {","const postsMissingPreview = fs.readdirSync('./output/posts').filter(post => !fs.existsSync(`./output/posts/${post}/preview.png`))","out.push(fullPath)","const content = html.split(`fold_${fold.id}`)[1]","function smartMakeDir(path) {","* * [path] [size] -> size is relative to the div, so a size of 1 would fill the space, or a size of .5 could fit two videos side by side","if (outputHashChanged || missingMainPreview || changedPosts.length || postsMissingPreview.length)","${text}","<div class=\"folder\" data-id=${nextGlobalId++}>","<div ${fold.open ? '' : 'style=\"display:none;\"'}>","fs.mkdirSync(path)","return new Promise(async resolve => {","outputHashChanged = true","<div style=\"cursor: pointer; text-align:${fold.style.align};\" onclick=\"window.markup.folder(event)\">","mem.numberOfLines = countLinesOfCode()","const script = document.createElement('script')","backgroundIndex = (backgroundIndex + 1) % backgroundPaths.length","if (fs.lstatSync(`../${projectDiv}`).isDirectory())","smartCopyFile(`${from}/${file}`, `${to}/${file}`)","function getOutputPaths(currentPath = './output', out = []) {","if (fs.statSync(`${from}/${file}`).isDirectory())","updated = true","const minTimePerBackground = 1000 * 30","for (const file of fs.readdirSync(from))","mem.uniqueLines = getUniqueLinesOfCode()","fs.readdirSync(`../${projectDiv}`).forEach(projectItem => {","mem.orderedLines = getOrderedLinesOfCode()","let currentBackground = {}","height: 1000","${content}","if (props.length > index + 1 && Number(props[index + 2]) > 0 && Number(props[index + 2] != 1))","if (updateLines) {","const postsUpdated = mem.postsUpdated ?? {}","let cycle = true","* strike: -> sets whether text will have strikethrough","html += `<br><img src=\"./${nextProp}\" alt=\"${nextProp}\">`","let loadedBackgrounds = []","smartCopyDir(`${from}/${file}`, `${to}/${file}`)","else if (lowerProp == 'showmarkup') {","const maxUps = 60","lastUpdate = Date.now()","style.showMarkup = true","async function update() {","else if (lowerProp == 'image') {","* script: -> embeds a piece of live code","style.showMarkup = false","for (const file of fs.readdirSync(path))","})))","const postsCreated = mem.postsCreated ?? {}","postPaths.push(`../${projectDiv}/${projectItem}`)","if (!allowed.includes(file)) {","if (fs.lstatSync(`../${projectDiv}/${projectItem}`).isDirectory() && projectItem.split('blogPost_')[0] == '')","mem.outputHash = newHash","return postPaths","width: 2000,","mem.postHashes = postHashes","html += `<br><img src=\"./${nextProp}\" alt=\"${nextProp}\" style=\"width:${Number(props[index + 2] * 100)}%\">`","before |[color #0f0]green|[color] it was boring","* * !-> toggles strikethrough","changedPosts.push(post)","html += `<br><video src=\"./${nextProp}\" controls alt=\"${nextProp}\" style=\"width:${Number(props[index + 2] * 100)}%\"></video>`","for example: to create 'before green it was boring' with 'green' being green you could use the following markup:","the first tag clump sets the color to green (#0f0), the second clump resets color to the default","style.showMarkup = !style.showMarkup","mem.fileHashes = getOutputPaths().map(path => path).reduce((acc, path) => ({ ...acc, [path.replace('output', '.')]: hashFileContents(path) }), {})","const ctx = canvas.getContext('2d')","mem.postsUpdated = postsUpdated","html += `<br><video src=\"./${nextProp}\" controls alt=\"${nextProp}\"></video>`","console.log(path, allowed, file, `${path}/${file}`)","else if (lowerProp == 'video') {","fs.readdirSync('./output/posts').forEach(post => {","let lastUpdate = 0","const postHashes = fs.readdirSync('./output/posts').reduce((acc, post) => ({ ...acc, [post]: getFolderHash(`./output/posts/${post}`) }), {})","style.strike = true","const lastPath = backgroundPaths[backgroundPaths.length - 1]","style.strike = false","else if (lowerProp == 'strike') {","function cleanPostsFolder(postPaths) {","return out","if (postHashes[post] != oldPostHashes[post]) {","style.strike = !style.strike","const backgroundPaths = [\"./posts/Making a custom blog/background.js\",\"./backgrounds/fireworks.js\",\"./backgrounds/hiddenSnakes.js\",\"./backgrounds/pong.js\",\"./backgrounds/rain.js\",\"./backgrounds/randomSymbols.js\",\"./backgrounds/uniqueCode.js\"];","document.addEventListener('DOMContentLoaded', async () => {","function mixPaths() {","function smartRemoveExtra(path, allowed) {","function setupFolder() {","postsUpdated[post] = Date.now()","fs.rmSync(`${path}/${file}`, { recursive: true, force: true })","if (!fs.existsSync('./output')) fs.mkdirSync('./output')","smartRemoveExtra('./output', ['.git', 'backgrounds', 'posts', 'backgroundManager.js', 'firaCode.ttf', 'index.html', 'mem.json', 'postStyles.css', 'siteStyles.css', 'updateStats.js', 'preview.png'])","const oldPostHashes = mem.postHashes ?? {}","for (let y = 0; y < height / fontSize; y++) {","canvas.classList.remove('blur')","#backgroundCanvas {","cycle = (backgroundPaths.length > 1)","border: 2px solid var(--background-dark);",".video_wrapper span {","requestAnimationFrame(() => setTimeout(update, 1000 / maxUps - (Date.now() - lastUpdate)))","//has to be set after the first update so the first background will always get loaded","update()","justify-items: center;","font-family: 'Fira Code', monospace;","ctx.fillStyle = 'rgb(0,50,0)'","#info {","top: 50%;","ctx.font = `${fontSize}px 'Fira Code'`","background-color: var(--black);","blurred = false",".scrollOffset {","border: 5px solid var(--background-dark);","padding: 25px;","ctx.fillText('0', x * fontSize, y * fontSize)","for (let x = 0; x < width / fontSize; x++)","if (currentBackground.update != undefined) await currentBackground.update(canvas, ctx)","ctx.fillRect(0, 0, width, height)","height: 25px;","margin-bottom: 15px;","text-align: center;","ctx.fillStyle = '#000'","text-decoration: underline;","ctx.textBaseline = 'top'","border-radius: 15px 15px 0 0;","border-bottom: none;","backgroundStarted = Date.now()","lastHeight = window.innerHeight","video {","const fontSize = (/android|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini/i).test(navigator.userAgent || navigator.vendor || window.opera) ? 50 : 25","let fireworks = []","fillGrid(canvas, ctx)","let lastFirework = 0","lastWidth = window.innerWidth","if (Date.now() - lastFirework >= 1000) {","export function update(canvas, ctx) {","left: 50%;","if (lastWidth != window.innerWidth || lastHeight != innerHeight)","let [lastWidth, lastHeight] = [0, 0]","transform: translate(-50%, -50%);","position: fixed;","padding: 5px;","let [width, height] = [0, 0]","let grid = [[]]","width = canvas.width = window.innerWidth","height: 100%;","width: 1px;","margin: 2.5px;","#content {","@media (max-aspect-ratio: 1/1) {","function fillGrid(canvas, ctx) {","height = canvas.height = window.innerHeight","img,","grid = [...grid, ...new Array(Math.ceil(width / fontSize)).fill(0).map(() => [])].splice(0, Math.ceil(width / fontSize) + 1).map(colum => [...colum, ...new Array(Math.ceil(height / fontSize)).fill(0)].splice(0, Math.ceil(height / fontSize) + 1))","display: flex;","counter: 0,","width: 80vw;","maxRadius: Math.ceil(Math.random() * 15 + 10),","speed: Math.ceil(Math.random() * 10)","lastFirework = Date.now()","display: block;","color: var(--highlight);","#info div {","width: 100vw;","y: Math.floor(Math.random() * grid[0].length),","radius: 1,","fireworks.push({","x: Math.floor(Math.random() * grid.length),","for (let x = Math.max(firework.x - firework.radius, 0); x < Math.min(firework.x + firework.radius, grid.length); x++)","#info #return_link a {","fireworks.forEach((firework, index) => {","border-top: none;","object-fit: fill;","const distance = Math.abs(x - firework.x) + Math.abs(y - firework.y) + 1","border-radius: 0 0 15px 15px;","for (let y = Math.max(firework.y - firework.radius, 0); y < Math.min(firework.y + firework.radius, grid[0].length); y++) {","font-size: 2em;","if (distance <= firework.radius) {","ctx.fillRect(x * fontSize, y * fontSize, fontSize, fontSize)","ctx.fillStyle = `rgb(0,${255 - firework.radius * (205 / firework.maxRadius)},0)`",".video_wrapper {","ctx.fillText(distance < firework.radius ? '0' : '1', x * fontSize, y * fontSize)","filter: blur(5px) saturate(.5);","border-radius: 0;","#returnToTopButton span {","if (firework.radius == firework.maxRadius) {","if (Math.abs(x - firework.x) + Math.abs(y - firework.y) <= firework.radius) {","color: transparent;","cursor: pointer;","let snakes = []","for (let y = Math.max(firework.y - firework.radius, 0); y < Math.min(firework.y + firework.radius, grid[0].length); y++)","fireworks.splice(index, 1)",".video_wrapper:hover {","background-color: var(--background-dark);","margin: 25px;","} else if ((firework.counter = (firework.counter + 1) % firework.speed) == 0) firework.radius++","filter: blur(0) saturate(1);","export function start(canvas, ctx) {","#post_background {","grid = [[]]","let snake = snakes[Math.floor(Math.random() * snakes.length)]","ctx.fillStyle = `rgb(0,${grid[x][y]},0)`","let tailX = snake[snake.length - 1].x","grid = [...grid, ...new Array(Math.ceil(width / fontSize)).fill(0).map(() => [])].splice(0, Math.ceil(width / fontSize) + 1).map(colum => [...colum, ...new Array(Math.ceil(height / fontSize)).fill(50)].splice(0, Math.ceil(height / fontSize) + 1))","grid[tailX][tailY] -= 25","src: url('./firaCode.ttf') format('truetype');","let tailY = snake[snake.length - 1].y","transition: all .25s ease-in-out","color: var(--white);","#returnToTopButton {","transition: filter 1s ease-in-out;","#backgroundCanvas.blur {","color: var(--highlight)","ctx.fillRect(tailX * fontSize, tailY * fontSize, fontSize, fontSize)","height: 0;","background-color: var(--background);","ctx.fillStyle = `rgb(0,${grid[tailX][tailY]},0)`","const dirs = [{ x: 0, y: 0 }, { x: 1, y: 0 }, { x: -1, y: 0 }, { x: 0, y: 1 }, { x: 0, y: -1 }]",")","#post {","for (let index = snake.length - 1; index > 0; index--) {","border-radius: 15px;","snake[0].y--","for (let i = 0; i < paddleSize; i++) {","code {","ctx.fillStyle = '#0f0'","if (headY + 1 < grid[0].length && (snake[2].y != headY + 1 || trys > 50)) {","ctx.fillText('1', index * Math.floor(width / fontSize - 1) * fontSize, (paddle + i) * fontSize)","balls.forEach(ball => {","ctx.fillText('0', (ball.lx + dir.x) * fontSize, (ball.ly + dir.y) * fontSize)","let headX = snake[0].x","border: 5px solid var(--highlight-dark);","padding: 10px;","function resetCanvas(canvas, ctx) {","snake[index] = { ...snake[index - 1] }","border-radius: 5px;","ctx.fillText('0', tailX * fontSize, tailY * fontSize)","addStat(div, `Current hash: <code>${mem.outputHash}</code>`)","filter: blur(25px) brightness(0);","ball.lx = ball.x","const background = await import('./background.js')","const div = document.getElementById('info')","snake[0].x++","resetCanvas(canvas, ctx)","if (background.start != undefined) await background.start(canvas, ctx)","ball.x += ball.sx","if (headY > 0 && (snake[2].y != headY - 1 || trys > 50)) {","margin: 10px;","case 2:","if (background.update != undefined) {","function addStat(parent, text) {",".then(mem => {","ball.y += ball.sy","const div = document.createElement('div')","border: 5px solid var(--border);","let hasMoved = false","ball.ly = ball.y","#posts {","let trys = 0","addStat(div, `Last updated: <code>${Math.floor((Date.now() - mem.lastUpdate) / 86400000)}</code> days ago`)","#titleText {","font-size: xx-large","ctx.fillRect((ball.lx + dir.x) * fontSize, (ball.ly + dir.y) * fontSize, fontSize, fontSize)","if (ball.x == 0) ball.sx = 1","while (!hasMoved) {","width: min-content;","margin-bottom: 10px;","ctx.fillStyle = 'rgb(0,255,0)'","case 3:","if (ball.x == Math.floor(width / fontSize) - 2) ball.sx = -1","addStat(div, `Created out of only <code>${mem.numberOfLines}</code> lines of code`)","ctx.fillRect((ball.x + dir.x) * fontSize, (ball.y + dir.y) * fontSize, fontSize, fontSize)","grid-auto-flow: column;","await background.update(canvas, ctx)","let headY = snake[0].y","if (ball.y == 0) ball.sy = 1","if (headX + 1 < grid.length && (snake[2].x != headX + 1 || trys > 50)) {","snake[0].y++","if (ball.y == Math.floor(height / fontSize) - 2) ball.sy = -1","balls.unshift(balls.pop())","let div = document.createElement('div')","paddles[0] -= Math.max(-3, Math.min(3, paddles[0] - (balls[0].y - (paddleSize - 1) / 2)))","paddles[1] -= Math.max(-3, Math.min(3, paddles[1] - (balls[0].y - (paddleSize - 1) / 2)))","switch (Math.floor(Math.random() * 4)) {","div.innerHTML = text","ctx.fillRect(headX * fontSize, headY * fontSize, fontSize, fontSize)","const script = document.currentScript","/* border-radius: 0 0 15px 15px; */",".post_row {","balls.sort((a, b) => (a.sx * width + a.x) - (b.sx * width + b.x))",".post {","white-space: nowrap;",".post .title {","ctx.fillStyle = `rgb(0,${grid[headX][headY]},0)`","const addStat = text => {","parent.appendChild(div)","border: 2px solid var(--highlight-dark);","fetch('../../mem.json')","trys++","script.insertAdjacentElement('afterend', div)","addStat(`Last updated: <code>${Math.floor((Date.now() - mem.postsUpdated[postName]) / 86400000)}</code> days ago`)","addStat(`First published: <code>${Math.floor((Date.now() - mem.postsCreated[postName]) / 86400000)}</code> days ago`)","grid[snake[0].x][snake[0].y] += 50","ctx.fillText('1', (ball.x + dir.x) * fontSize, (ball.y + dir.y) * fontSize)","addStat(`Current hash: <code>${mem.postHashes[postName]}</code>`)","paddles.forEach((paddle, index) => {","ctx.fillText('1', headX * fontSize, headY * fontSize)","snakes = new Array(3).fill(0).map(() => new Array(25).fill(0).map(() => ({ x: Math.floor(Math.random() * grid.length), y: Math.floor(Math.random() * grid[0].length) })))","if (headX > 0 && (snake[2].x != headX - 1 || trys > 50)) {","ctx.fillRect(x * fontSize, 0, fontSize, height)","for (let x of [0, Math.floor(width / fontSize - 1)]) {","ctx.fillRect(index * Math.floor(width / fontSize - 1) * fontSize, paddle * fontSize, fontSize, paddleSize * fontSize)","balls.forEach(ball =>","case 0:","dirs.forEach(dir => {","snake[0].x--","let balls = new Array(fontSize == 50 ? 2 : 5).fill(0)","hasMoved = true","for (let y = 0; y < height / fontSize; y++)","let paddles = [0, 0]","let paddleSize","break","case 1:","balls[i].x = Math.round(width / fontSize / 2) + Math.round((i - balls.length / 2 + .5) * width / fontSize / balls.length / 2)","if (offsets[index] == 0) {","balls[i].sx = Math.floor(Math.random() * 2) * 2 - 1","if (uniqueLines != undefined) {","const x = Math.floor(Math.random() * grid.length)","function drip(colum, index) {","if (Math.random() < .1) {","const word = (words[Math.floor(Math.random() * words.length)] + ' ').split('')","balls[i] = {}","balls[i].y = Math.round(height / fontSize / 2) + Math.round((Math.random() * 2 - 1) * (height / fontSize / 3))","else colum.unshift([''])","const color = `rgb(0,${Math.round(Math.random() * 205) + 50},0)`","const lineOffset = String(numberOfUniqueLines).length * fontWidth","ctx.fillRect(0, 0, canvas.width, canvas.height)","} else if (offsets[index] > 0) offsets[index]--","balls[i].sy = Math.floor(Math.random() * 2) * 2 - 1","balls[i].lx = balls[i].x","columns.forEach((colum, x) => {","function stringToNumberHash(str) {","for (let i = 0; i < balls.length; i++) {","export function stop() {","const offset = Date.now() / (1000 / linesPerSec)","for (let y = -1; y < height / fontSize + 1; y++) {","colum = colum.splice(Math.ceil(height / fontSize) + offsets[index])","balls[i].ly = balls[i].y","const lineLength = Math.ceil((width - lineOffset) / fontWidth)","const lineNumber = numberOfUniqueLines - (Math.floor(offset) - y + numberOfUniqueLines) % numberOfUniqueLines","let uniqueLines, lineColors, fontWidth, numberOfUniqueLines","let hash = 0","grid[x][y] = Math.floor(Math.random() * 255)","const line = uniqueLines[lineNumber - 1]","fetch('./mem.json')","offsets[index] = word.length","let words","let columns = []","let needWords = false",".then(response => response.json())","word.forEach((char, index) => colum.unshift([word[word.length - index - 1], color]))","export function start(canvas,ctx) {","paddleSize = Math.round(height / fontSize / 3 / 2) * 2 + 1","if (words == undefined) return","offsets[index]--","const textY = (y + offset % 1) * fontSize","colum.forEach((item, y) => {","fillColumns()","ctx.fillText(lineNumber, (lineOffset - String(lineNumber).length * fontWidth) / 2, textY)","if (lastWidth != window.innerWidth || lastHeight != innerHeight) {","const y = Math.floor(Math.random() * grid[0].length)","ctx.fillStyle = item[1]","paddles.map(() => Math.round(height / fontSize / 2))","ctx.fillText(('|' + line).slice(0, lineLength), lineOffset, textY)","for (let i = 0; i < str.length; i++) {","ctx.fillStyle = `rgb(0,${lineColors[line]},0)`","return (hash & maxInt32) / maxInt32","fontWidth = ctx.measureText('0').width",":root {","columns.forEach((colum, index) => {","hash = str.charCodeAt(i) + ((hash << 5) - hash)","ctx.fillText(item[0], x * fontSize, (y - offsets[x]) * fontSize)","if (Math.random() < .1) drip(colum, index)","const maxInt32 = Math.pow(2, 31) - 1","let offsets = []","<div class=\"post\" onclick=\"window.location.href='./posts/Making a custom blog/'\">\n <div class=\"title\">\n \n <div class=\"markup\" style=\"color:#fff; font-style:normal; font-weight:normal; font-size:calc(xx-large * 0.25); text-decoration: none;margin:0; padding:0; word-wrap:break-word; width:100%; height:100%;\">\n <div style=\"text-align:center;\">Making a <span style=\"color:#0f0; font-weight:bold;\"><code>|[custom]</code></span> blog</div>\n </div>\n \n </div>\n \n <div class=\"markup preview\" style=\"color:#0f0; font-style:normal; font-weight:normal; font-size:small; text-decoration: none;margin:0; padding:0; word-wrap:break-word; width:100%; height:100%;\">\n <div style=\"text-align:center;\">I like to create posts, but have never found a good platform to do so.<br>Follow along as I create my own blog site, complete with custom markup, live backgrounds, and more!</div>\n </div>\n </div>","function fillColumns() {","words = data.uniqueLines.join(' ')","offsets = []","export function start(canvas) {","columns = []","--transparentOpacity: 50%;","lineColors = data.uniqueLines.reduce((acc, line) => ({ ...acc, [line]: stringToNumberHash(line) * 205 + 50 }), {})","uniqueLines = data.uniqueLines","numberOfUniqueLines = data.uniqueLines.length","offsets = [...offsets, ...new Array(Math.ceil(width / fontSize)).fill(0)].splice(0, Math.ceil(width / fontSize))","if (words == undefined)","const linesPerSec = fontSize == 50 ? 5 : 10","const chars = '`~!@#$%^&*()_-+={[}]|\\\\:;\"\\'<,>.?/'.split('')","font-family: 'Fira Code';","--highlight-dark: #0f06;","@font-face {","columns.forEach((colum, index) => drip(colum, index))","src: url('../../firaCode.ttf') format('truetype');","words = words.split(char).join(' ')","font-weight: normal;","--background-dark: rgb(from #3336 r g b / var(--transparentOpacity));","needWords = false","grid = [...grid, ...new Array(Math.ceil(width / fontSize)).fill(0).map(() => [])].splice(0, Math.ceil(width / fontSize) + 1).map(colum => [...colum, ...new Array(Math.ceil(height / fontSize)).fill(0).map(() => Math.floor(Math.random() * 255))].splice(0, Math.ceil(height / fontSize) + 1))","for (let i = 0; i < height * 2; i += fontSize)",".then(data => {","const specialChars = '`~!@#$%^&*()_-+={[}]|\\\\:;\"\\'<,>.?/1234567890'.split('')","box-sizing: border-box;","* {","function fillGrid(canvas,ctx) {",".catch(error => {","needWords = true","font-style: normal;","ctx.fillText(chars[grid[x][y] % chars.length], x * fontSize, y * fontSize)","html,","fillGrid(canvas,ctx)","for (let i = 0; i < Math.random() * 25; i++) {","--highlight: #0f0f;","--black-solid: rgb(from #000 r g b / var(--transparentOpacity));","specialChars.forEach(char =>","export function update(canvas,ctx) {","--black: rgb(from #0006 r g b / var(--transparentOpacity));","if (needWords) {","words = words.split(' ').filter(word => word != '')","--background: rgb(from #45454582 r g b / var(--transparentOpacity));","--white: rgb(from #fff r g b / var(--transparentOpacity));","console.error('Error fetching mem for stats:', error)","while (specialChars.some(char => words.includes(char)))","columns = [...columns, ...new Array(Math.ceil(width / fontSize)).fill(0).map(() => [])].splice(0, Math.ceil(width / fontSize))","--border: rgb(from #9996 r g b / var(--transparentOpacity));","overflow: hidden auto;","left: 0;","width: 100%;","z-index: 1;","margin: 0;","height: calc(100vh - 5px);","align-items: center;","body {","padding: 0;","#overlay {","background-color: var(--black-solid);","padding: 1px;","position: absolute;","top: 0;","display: grid;","justify-content: center;"],"orderedLines":{"blankPost.html":["<!DOCTYPE html>","<html lang=\"en\">","<title><!-- title name link --></title>","","<head>","    <meta charset=\"UTF-8\">","    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">","    <link rel=\"stylesheet\" href=\"../../postStyles.css\">","    <script src=\"./backgroundManager.js\"></script>","","    <!-- Primary Meta Tags -->","    <meta name=\"title\" content=\"meta title link\" />","    <meta name=\"description\" content=\"meta description link\" />","","    <!-- Open Graph / Facebook -->","    <meta property=\"og:type\" content=\"website\" />","    <meta property=\"og:url\" content=\"meta url link\" />","    <meta property=\"og:title\" content=\"meta title link\" />","    <meta property=\"og:description\" content=\"meta description link\" />","    <meta property=\"og:image\" content=\"meta image link\" />","","    <!-- Twitter -->","    <meta property=\"twitter:card\" content=\"summary_large_image\" />","    <meta property=\"twitter:url\" content=\"meta url link\" />","    <meta property=\"twitter:title\" content=\"meta title link\" />","    <meta property=\"twitter:description\" content=\"meta description link\" />","    <meta property=\"twitter:image\" content=\"meta image link\" />","</head>","","<body>","    <canvas id=\"backgroundCanvas\"></canvas>","    <div id=\"overlay\">","        <div class=\"scrollOffset\"></div>","        <div id=\"content\">","            <div id=\"info\">","                <!-- title markup link -->","                <!-- will autofill on website load -->","                <script>","                    // stat update script link","                </script>","                <!-- </div> -->","                <div id=\"return_link\">","                    <a href=\"../../\">Home</a>","                </div>","            </div>","            <div id=\"post_background\">","                <div id=\"post\">","                    <!-- post link -->","                </div>","            </div>","            <div id=\"returnToTopButton\">","                <span onclick=\"window.scroll({top:0,left:0,behavior:'smooth'})\">Return to top</span>","            </div>","        </div>","        <div class=\"scrollOffset\"></div>","    </div>","</body>","","</html>"],"blankSite.html":["<!DOCTYPE html>","<html lang=\"en\">","<title>Jack's project hub</title>","","<head>","    <meta charset=\"UTF-8\">","    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">","    <link rel=\"stylesheet\" href=\"./siteStyles.css\">","    <script src=\"./backgroundManager.js\"></script>","    <script src=\"./updateStats.js\"></script>","","    <!-- Primary Meta Tags -->","    <meta name=\"title\" content=\"Jack's project hub\" />","    <meta name=\"description\"","        content=\"THE place to read about all of my projects, with exclusive content not seen elsewhere!\" />","","    <!-- Open Graph / Facebook -->","    <meta property=\"og:type\" content=\"website\" />","    <meta property=\"og:url\" content=\"https://jacks-project-hub.vercel.app/\" />","    <meta property=\"og:title\" content=\"Jack's project hub\" />","    <meta property=\"og:description\"","        content=\"THE place to read about all of my projects, with exclusive content not seen elsewhere!\" />","    <meta property=\"og:image\" content=\"https://jacks-project-hub.vercel.app/preview.png\" />","","    <!-- Twitter -->","    <meta property=\"twitter:card\" content=\"summary_large_image\" />","    <meta property=\"twitter:url\" content=\"https://jacks-project-hub.vercel.app/\" />","    <meta property=\"twitter:title\" content=\"Jack's project hub\" />","    <meta property=\"twitter:description\"","        content=\"THE place to read about all of my projects, with exclusive content not seen elsewhere!\" />","    <meta property=\"twitter:image\" content=\"https://jacks-project-hub.vercel.app/preview.png\" />","</head>","","<body>","    <canvas id=\"backgroundCanvas\"></canvas>","    <div id=\"overlay\">","        <div class=\"scrollOffset\"></div>","        <div id=\"content\">","            <div id=\"info\">","                <div id=\"titleText\">","                    Jack's project hub","                </div>","                <!-- will autofill on website load -->","            </div>","            <div id=\"posts\">","                <!-- posts link -->","                <script> //Controls the grid for the posts","                    {","                        Array.from(document.getElementsByClassName('post')).forEach(post => post.style.width = Math.random() * 250 + 250 + 'px')","                        Array.from(document.getElementsByClassName('post')).forEach(post => post.style.height = Math.random() * 250 + 250 + 'px')","","                        const wrapper = document.getElementById('posts')","                        const postPadding = 10","                        const borderSize = 25","                        const updateGrid = () => {","                            const posts = Array.from(document.getElementsByClassName('post'))","                            const maxWidth = wrapper.getBoundingClientRect().width - borderSize * 2","                            Array.from(document.getElementsByClassName('post_row')).forEach(row => row.classList.add('post_row_old'))","                            let lastRowElement = document.createElement('div')","                            lastRowElement.classList.add('post_row')","                            let lastRowWidth = 0","                            for (const post of posts) {","                                const width = post.getBoundingClientRect().width + postPadding * 2","                                if (lastRowWidth === 0 || lastRowWidth + width < maxWidth) {","                                    lastRowElement.appendChild(post)","                                    lastRowWidth += width","                                }","                                else {","                                    wrapper.appendChild(lastRowElement)","                                    lastRowElement = document.createElement('div')","                                    lastRowElement.classList.add('post_row')","                                    lastRowElement.appendChild(post)","                                    lastRowWidth = width","                                }","                            }","                            wrapper.appendChild(lastRowElement)","                            Array.from(document.getElementsByClassName('post_row_old')).forEach(row => row.remove())","                        }","                        document.addEventListener('DOMContentLoaded', updateGrid)","                        window.addEventListener('resize', updateGrid)","                    }","                </script>","            </div>","            <div id=\"returnToTopButton\">","                <span onclick=\"window.scroll({top:0,left:0,behavior:'smooth'})\">Return to top</span>","            </div>","        </div>","        <div class=\"scrollOffset\"></div>","    </div>","</body>","","</html>"],"crash.js":["(new ((await import('ws')).WebSocket)('ws://localhost:8080')).on('error', (error)=>console.error(error))"],"deploy.js":["const fs = require('fs')","const path = require('path')","const { exec } = require('child_process')","const { spawn } = require('bun')","    ;","(async () => {","    function execAsync(command, options) {","        return new Promise((resolve, reject) => {","            exec(command, options, (error, stdout, stderr) => {","                if (error)","                    reject(error)","                else","                    resolve(stdout || stderr)","            })","        })","    }","","    process.chdir('C:\\\\Users\\\\jack\\\\Home\\\\Programming\\\\blog projects\\\\blog generator')","","    console.log('Generating website.')","    await spawn({","        cmd: ['bun', 'generateWebsite.js']","    }).exited","    console.log('Website generated.')","","    let mem = JSON.parse(fs.readFileSync('./mem.json', 'utf8'))","","    const fileHashes = mem.fileHashes","    const lastFileHashes = mem.lastFileHashes ?? {}","","    let addedFiles = []","    let changedFiles = []","    let removedFiles = []","","    Object.keys(fileHashes).forEach(key => {","        if (lastFileHashes[key] == undefined)","            addedFiles.push(key)","        else if (lastFileHashes[key] != fileHashes[key])","            changedFiles.push(key)","    })","    Object.keys(lastFileHashes).forEach(key => {","        if (fileHashes[key] == undefined)","            removedFiles.push(key)","    })","","    const totalChanges = addedFiles.length + changedFiles.length + removedFiles.length","    if (totalChanges == 0) {","        console.log('No changes')","        return","    }","","    let changes = []","    if (addedFiles.length > 0) changes.push(`added ${addedFiles.length} file${addedFiles.length == 1 ? '' : 's'}: ${addedFiles.join(', ')}`)","    if (changedFiles.length > 0) changes.push(`changed ${changedFiles.length} file${changedFiles.length == 1 ? '' : 's'}: ${changedFiles.join(', ')}`)","    if (removedFiles.length > 0) changes.push(`removed ${removedFiles.length} file${removedFiles.length == 1 ? '' : 's'}: ${removedFiles.join(', ')}`)","","    let commitMessage","","    if (changes.length == 1) {","        commitMessage = changes[0]","        commitMessage = commitMessage.charAt(0).toUpperCase() + commitMessage.slice(1)","    } else commitMessage = `${totalChanges} changes: ${changes.join(', ')}`","","    process.chdir('.\\\\output')","","    try {","        // Check if .git directory exists, if not, initialize a new repository","        try {","            fs.accessSync(path.join('./', '.git'))","        } catch {","            await execAsync(`git init`, { cwd: './' })","            await execAsync(`git remote add origin https://github.com/AlgorithmAiden/jacks_project_hub.git`, { cwd: './' })","        }","","        // Ensure the main branch exists","        try {","            await execAsync(`git checkout -b main`, { cwd: './' })","        } catch {","            await execAsync(`git checkout main`, { cwd: './' })","        }","","        // Add all changes to staging","        await execAsync(`git add .`, { cwd: './' })","","        // Commit the changes","        await execAsync(`git commit -m \"${commitMessage}\"`, { cwd: './' })","","        // Force push the changes to the remote repository","        await execAsync('git push -f origin main', { cwd: './' })","","        console.log(commitMessage)","","        mem.lastFileHashes = fileHashes","        fs.writeFileSync('../mem.json', JSON.stringify(mem), 'utf8')","    } catch (error) {","        console.error('Error pushing changes to GitHub:', error)","    }","})()"],"generateWebsite.js":["const startTime = Date.now()","","const logDelay = (...args) => {","    if (logDelay.logs === undefined) logDelay.logs = []","    if (logDelay.lastLog === undefined) logDelay.lastLog = logDelay.start","    logDelay.logs.push([Date.now() - logDelay.start, Date.now() - logDelay.lastLog, ...args])","    logDelay.lastLog = Date.now()","}","logDelay.log = () => {","    logDelay.logs.forEach(log => console.log(...log))","}","logDelay.start = Date.now()","","logDelay('Program start')","","const fs = require('fs')","const path = require('path')","const crypto = require('crypto')","const markup = require('./markup.js')","","logDelay('Imported modules')","","const livePreviewInjection = `","<script>","${fs.readFileSync('./livePreviewInjection.js', 'utf-8')}","</script>","`","","// function wrapFunction(func, prefunc) {","//     return (...args) => {","//         prefunc(...args)","//         func(...args)","//     }","// }","","// fs.writeFileSync = wrapFunction(fs.writeFileSync, (to) => console.log('write', to))","// fs.copyFileSync = wrapFunction(fs.copyFileSync, (...args) => console.log('copy', ...args))","","const ignoredPaths = (() => {","    let dontScan = []","    let dontCount = []","    let dontPath = []","    let paths = fs.readFileSync('./ignoredPaths.txt', 'utf8').split('\\r\\n')","    paths.forEach(path => {","        if (path.slice(0, 2) == '//') return","        const prefix = path.slice(0, 1)","        const line = path.slice(2)","        if (prefix == '0') {","            dontScan.push(line)","            dontCount.push(line)","            dontPath.push(line)","        } else if (prefix == '1') {","            dontCount.push(line)","        } else if (prefix == '2') {","            dontScan.push(line)","        } else if (prefix == '3') {","            dontScan.push(line)","            dontCount.push(line)","        }","    })","    return { scan: dontScan, count: dontCount, path: dontPath }","})()","","","function smartCopyFile(from, to) {","    const exists = fs.existsSync(to)","    if (!exists || fs.statSync(from).mtime.getTime() !== fs.statSync(to).mtime.getTime()) {","        if (!exists)","            fs.mkdirSync(path.dirname(to), { recursive: true, force: true })","        fs.copyFileSync(from, to)","    }","}","","function smartMakeDir(path) {","    if (!fs.existsSync(path))","        fs.mkdirSync(path)","}","","function smartCopyDir(from, to) {","    for (const file of fs.readdirSync(from))","        if (fs.statSync(`${from}/${file}`).isDirectory())","            smartCopyDir(`${from}/${file}`, `${to}/${file}`)","        else","            smartCopyFile(`${from}/${file}`, `${to}/${file}`)","}","","function smartRemoveExtra(path, allowed) {","    for (const file of fs.readdirSync(path))","        if (!allowed.includes(file)) {","            console.log(path, allowed, file, `${path}/${file}`)","            fs.rmSync(`${path}/${file}`, { recursive: true, force: true })","        }","}","","function setupFolder() {","    process.chdir('C:\\\\Users\\\\jack\\\\Home\\\\Programming\\\\blog projects\\\\blog generator')","    if (!fs.existsSync('./output')) fs.mkdirSync('./output')","    smartRemoveExtra('./output', ['.git', 'backgrounds', 'posts', 'backgroundManager.js', 'firaCode.ttf', 'index.html', 'mem.json', 'postStyles.css', 'siteStyles.css', 'updateStats.js', 'preview.png'])","    smartCopyFile('./blankSite.html', './output/index.html')","    smartCopyFile('./siteStyles.css', './output/siteStyles.css')","    smartCopyFile('./postStyles.css', './output/postStyles.css')","    smartCopyFile('./updateHomeStats.js', './output/updateStats.js')","    smartCopyFile('./firaCode.ttf', './output/firaCode.ttf')","    smartMakeDir('./output/backgrounds')","    smartMakeDir('./output/posts')","}","","function findPostPaths() {","    const postPaths = []","    fs.readdirSync('../').forEach(projectDiv => {","        if (fs.lstatSync(`../${projectDiv}`).isDirectory())","            fs.readdirSync(`../${projectDiv}`).forEach(projectItem => {","                if (fs.lstatSync(`../${projectDiv}/${projectItem}`).isDirectory() && projectItem.split('blogPost_')[0] == '')","                    postPaths.push(`../${projectDiv}/${projectItem}`)","            })","    })","    return postPaths","}","","function cleanPostsFolder(postPaths) {","    postPaths = postPaths.map(post => post.split('blogPost_')[1])","    for (const file of fs.readdirSync('./output/posts'))","        if (!postPaths.includes(file))","            fs.rmSync(`./output/posts/${file}`, { recursive: true, force: true })","}","","function setupLiveBackgrounds(postPaths) {","    const backgroundPaths = []","","    postPaths.forEach(async postPath => {","        if (fs.existsSync(`${postPath}/background.js`)) {","            fs.readFileSync(`${postPath}/background.js`, 'utf8').split('\\r\\n').forEach(line => {","                if (line.slice(0, 26) == '//includeInHomeBackgrounds')","                    backgroundPaths.push(`./posts/${postPath.split('blogPost_')[1]}/background.js`)","            })","        }","    })","","    backgroundPaths.push(...fs.readdirSync('./mainPageBackgrounds').map(path => `./backgrounds/${path}`))","","    smartRemoveExtra('./output/backgrounds', backgroundPaths.map(path => path.slice(14)))","","    smartCopyDir('./mainPageBackgrounds', './output/backgrounds')","    fs.writeFileSync('./output/backgroundManager.js', `const backgroundPaths = ${JSON.stringify(backgroundPaths)};\\r\\n${fs.readFileSync('./siteBackgroundManager.js', 'utf8')}`, 'utf8')","}","","function hashFileContents(filePath) {","    const fileBuffer = fs.readFileSync(filePath)","    const hashSum = crypto.createHash('md5')","    hashSum.update(fileBuffer)","    return hashSum.digest('hex')","}","","function getFolderHash(startPath) {","    let combinedHash = crypto.createHash('md5')","","    function recurseDir(currentPath) {","        const items = fs.readdirSync(currentPath)","        items.forEach(item => {","            const fullPath = path.join(currentPath, item)","            const stat = fs.statSync(fullPath)","            if (stat.isDirectory() && !ignoredPaths.scan.includes(fullPath)) {","                recurseDir(fullPath)","            } else if (stat.isFile() && !ignoredPaths.scan.includes(fullPath) && item !== 'preview.png') {","                const fileHash = hashFileContents(fullPath)","                combinedHash.update(fileHash)","            }","        })","    }","","    recurseDir(startPath)","    return combinedHash.digest('hex')","}","","function countLinesOfCode(directory = './') {","    const files = fs.readdirSync(directory)","","    let total = 0","","    files.forEach(file => {","        const fullPath = path.join(directory, file)","        const stats = fs.statSync(fullPath)","","        if (stats.isDirectory() && !ignoredPaths.count.includes(fullPath)) {","            total += countLinesOfCode(fullPath)","        } else if (stats.isFile() && !ignoredPaths.count.includes(fullPath))","            total += fs.readFileSync(fullPath, 'utf8').split('\\r\\n').length","    })","    return total","}","","function getUniqueLinesOfCode() {","    let codeLines = []","","    function readFile(path) {","        let fileContent = fs.readFileSync(path, 'utf8').split('\\r\\n')","","        fileContent.forEach(item => {","            while (item.split('  ').length > 1)","                item = item.split('  ').join(' ')","            item = item.trim()","            if (!codeLines.includes(item))","                codeLines.push(item)","        })","    }","","    function scanDirectory(directory) {","        const files = fs.readdirSync(directory)","","        files.forEach(file => {","            const fullPath = path.join(directory, file)","            const stats = fs.statSync(fullPath)","","            if (stats.isDirectory() && !ignoredPaths.scan.includes(fullPath)) {","                scanDirectory(fullPath)","            } else if (stats.isFile() && !ignoredPaths.scan.includes(fullPath))","                readFile(fullPath)","        })","    }","","    scanDirectory('./')","","    codeLines = codeLines.sort(() => Math.random() * 2 - 1)","","    return codeLines","}","","function getOrderedLinesOfCode() {","    let codeLines = {}","","    function readFile(path) {","        let fileContent = fs.readFileSync(path, 'utf8').split('\\r\\n')","","        codeLines[path] = []","","        fileContent.forEach(item => {","            codeLines[path].push(item)","        })","    }","","    function scanDirectory(directory) {","        const files = fs.readdirSync(directory)","","        files.forEach(file => {","            const fullPath = path.join(directory, file)","            const stats = fs.statSync(fullPath)","","            if (stats.isDirectory() && !ignoredPaths.scan.includes(fullPath)) {","                scanDirectory(fullPath)","            } else if (stats.isFile() && !ignoredPaths.scan.includes(fullPath))","                readFile(fullPath)","        })","    }","","    scanDirectory('./')","","    return codeLines","}","","function getMem() {","    return JSON.parse(fs.readFileSync('./mem.json', 'utf8'))","}","","function saveMem(mem) {","    fs.writeFileSync('./mem.json', JSON.stringify(mem), 'utf8')","}","","function generatePost(postPath, injectLivePreview) {","    const name = postPath.split('blogPost_')[1]","","    smartMakeDir(`./output/posts/${name}`)","","    fs.readdirSync(postPath).forEach(file => {","        if (!['script.txt', 'title.txt', 'preview.txt'].includes(file)) {","            if (fs.statSync(`${postPath}/${file}`).isDirectory())","                smartCopyDir(`${postPath}/${file}`, `./output/posts/${name}/${file}`, { recursive: true })","            else","                smartCopyFile(`${postPath}/${file}`, `./output/posts/${name}/${file}`)","        }","    })","","    smartCopyFile('./postBackgroundManager.js', `./output/posts/${name}/backgroundManager.js`)","","    let html = fs.readFileSync('./blankPost.html', 'utf8')","","    html = html.split('meta title link').join(`${name} - Jack's project hub`)","    html = html.split('meta url link').join(`https://jacks-project-hub.vercel.app/posts/${name}/`)","    const text = markup.stripTags(fs.readFileSync(`${postPath}/preview.txt`, 'utf-8'))","    html = html.split('meta description link').join(text.length < 100 ? text : text.slice(0, 97) + '...')","    html = html.split('meta image link').join(`https://jacks-project-hub.vercel.app/posts/${name}/preview.png`)","    html = html.replace('<!-- title name link -->', name)","    let title = name","    if (fs.existsSync(`${postPath}/title.txt`)) title = markup.translate(fs.readFileSync(`${postPath}/title.txt`, 'utf8'))","    html = html.replace('<!-- title markup link -->', title)","    html = html.replace('// stat update script link', `const postName = '${name}'\\r\\n${fs.readFileSync('./updatePostStats.js', 'utf8')}`.split('\\r\\n').join('\\r\\n                    '))","    html = html.replace('<!-- post link -->', markup.translate(fs.readFileSync(`${postPath}/script.txt`, 'utf8')))","","","    if (injectLivePreview) html += livePreviewInjection","","    fs.writeFileSync(`./output/posts/${name}/index.html`, html, 'utf8')","","    function scan(to, from) {","        for (const file of fs.readdirSync(to))","            if (!fs.existsSync(`${from}/${file}`) && !['backgroundManager.js', 'index.html', 'preview.png'].includes(file))","                fs.rmSync(`${to}/${file}`, { recursive: true, force: true })","            else if (fs.statSync(`${to}/${file}`).isDirectory())","                scan(`${to}/${file}`, `${from}/${file}`)","    }","    scan(`./output/posts/${name}`, postPath)","","    for (const file of ['script.txt', 'title.txt', 'preview.txt'])","        if (fs.existsSync(`./output/posts/${name}/${file}`))","            fs.rmSync(`./output/posts/${name}/${file}`, { recursive: true, force: true })","}","","function generatePostCard(postPath) {","    const name = postPath.split('blogPost_')[1]","    let title = name","    if (fs.existsSync(`${postPath}/title.txt`)) title = markup.translate(fs.readFileSync(`${postPath}/title.txt`, 'utf8'), 1 / 4)","    let html = `<div class=\"post\" onclick=\"window.location.href='./posts/${name}/'\">`","    html += `","    <div class=\"title\">","        ${title}","    </div>","    `","","    if (fs.existsSync(`${postPath}/preview.txt`)) html += markup.translate(fs.readFileSync(`${postPath}/preview.txt`, 'utf8'), 1, ['preview'])","","    html += '</div>'","","    return html","}","","const changedPosts = []","let outputHashChanged = false","function saveAndCopyStats(updateLines) {","    const newHash = getFolderHash('./output')","    const mem = getMem()","    if (mem.outputHash != newHash) {","        mem.lastUpdate = Date.now()","        updated = true","        outputHashChanged = true","    }","    mem.outputHash = newHash","    if (updateLines) {","        mem.numberOfLines = countLinesOfCode()","        mem.uniqueLines = getUniqueLinesOfCode()","        mem.orderedLines = getOrderedLinesOfCode()","    }","","    function getOutputPaths(currentPath = './output', out = []) {","        const items = fs.readdirSync(currentPath)","        items.forEach(item => {","            const fullPath = path.join(currentPath, item)","            const stat = fs.statSync(fullPath)","            if (stat.isDirectory() && !ignoredPaths.path.includes(fullPath)) {","                getOutputPaths(fullPath, out)","            } else if (stat.isFile() && !ignoredPaths.path.includes(fullPath))","                out.push(fullPath)","        })","        return out","    }","    mem.fileHashes = getOutputPaths().map(path => path).reduce((acc, path) => ({ ...acc, [path.replace('output', '.')]: hashFileContents(path) }), {})","    const postHashes = fs.readdirSync('./output/posts').reduce((acc, post) => ({ ...acc, [post]: getFolderHash(`./output/posts/${post}`) }), {})","    const oldPostHashes = mem.postHashes ?? {}","    const postsUpdated = mem.postsUpdated ?? {}","    fs.readdirSync('./output/posts').forEach(post => {","        if (postHashes[post] != oldPostHashes[post]) {","            postsUpdated[post] = Date.now()","            changedPosts.push(post)","        }","    })","    mem.postHashes = postHashes","    mem.postsUpdated = postsUpdated","    const postsCreated = mem.postsCreated ?? {}","    fs.readdirSync('./output/posts').forEach(post => {","        if (postsCreated[post] == undefined)","            postsCreated[post] = Date.now()","    })","    mem.postsCreated = postsCreated","    let siteMem = {}","    for (let key of ['lastScan', 'lastUpdate', 'outputHash', 'numberOfLines', 'uniqueLines', 'orderedLines', 'postsUpdated', 'postsCreated', 'postHashes']) siteMem[key] = mem[key]","    fs.writeFileSync('./output/mem.json', JSON.stringify(siteMem), 'utf8')","    saveMem(mem)","}","","function generateMainPage(postPaths, injectLivePreview) {","    let html = fs.readFileSync('./output/index.html', 'utf8')","","    html = html.replace('<!-- posts link -->', postPaths.map(postPath => generatePostCard(postPath)).join('\\n '))","","    if (injectLivePreview) html += livePreviewInjection","","    fs.writeFileSync('./output/index.html', html, 'utf8')","}","","async function generateLinkPreviews() {","    const postsMissingPreview = fs.readdirSync('./output/posts').filter(post => !fs.existsSync(`./output/posts/${post}/preview.png`))","    const missingMainPreview = !fs.existsSync('./output/preview.png')","    if (outputHashChanged || missingMainPreview || changedPosts.length || postsMissingPreview.length)","        return new Promise(async resolve => {","            const puppeteer = require('puppeteer')","            const http = require('http')","            const express = require('express')","","            console.log('Taking preview screenshots.')","            const app = express()","            app.use(express.static('./output'))","            const server = await new Promise((resolve, reject) => {","                const server = app.listen(8080, (error) => {","                    if (error) {","                        reject(error)","                        return","                    }","                    const interval = setInterval(() => {","                        http.get('http://localhost:8080', (res) => {","                            if (res.statusCode === 200) {","                                clearInterval(interval)","                                resolve(server)","                            }","                        }).on('error', () => { })","                    }, 100)","                })","                server.on('error', (err) => {","                    clearInterval(interval)","                    reject(err)","                })","            })","            const browser = await puppeteer.launch()","            const page = await browser.newPage()","            await page.setViewport(await page.evaluate(() => ({","                width: 2000,","                height: 1000","            })))","","            if (outputHashChanged || missingMainPreview) {","                console.log('Screenshotting main page.')","                await page.goto(`http://localhost:8080/index.html`);","                (await page.target().createCDPSession()).send('Network.clearBrowserCache')","                await page.reload({ waitUntil: ['networkidle0'], bypassCache: true })","                await page.waitForSelector('#backgroundCanvas')","                await page.evaluate(() => {","                    const canvas = document.getElementById('backgroundCanvas')","                    canvas.style.transition = 'all 0s'","                    canvas.style.filter = 'blur(0px)'","                })","                await page.screenshot({ path: './output/preview.png' })","            }","            for (const post of [...changedPosts, ...postsMissingPreview].sort().reduce((acc, item) => {","                if (acc[acc.length - 1] !== item) acc.push(item)","                return acc","            }, [])) {","                console.log(`Screenshotting post: ${post}`)","                await page.goto(`http://localhost:8080//posts/${post}/index.html`);","                (await page.target().createCDPSession()).send('Network.clearBrowserCache')","                await page.reload({ waitUntil: ['networkidle0'], bypassCache: true })","                await page.screenshot({ path: `./output/posts/${post}/preview.png` })","            }","","            await browser.close()","","            await new Promise(resolve => {","                server.on('close', resolve)","                server.close()","            })","","            console.log('Screenshots taken.')","            resolve()","        })","    else","        return Promise.resolve()","}","",";","(async () => {","    logDelay('Main start')","","    const previewMode = process.argv.includes('previewMode')","    if (previewMode)","        console.log('posts:', JSON.parse(process.argv[process.argv.indexOf('previewMode') + 1]))","","    console.log('Generating website')","","    setupFolder()","","    logDelay('Setup folder')","","    const postPaths = findPostPaths()","","    logDelay('Found post paths')","","    cleanPostsFolder(postPaths)","","    logDelay('Cleaned posts folder')","","    setupLiveBackgrounds(postPaths)","","    logDelay('Setup live backgrounds')","","    if (previewMode)","        JSON.parse(process.argv[process.argv.indexOf('previewMode') + 1]).forEach(postPath => generatePost(postPath, true))","    else","        postPaths.forEach(postPath => generatePost(postPath))","","    logDelay('Generated posts')","","    generateMainPage(postPaths, previewMode)","","    logDelay('Generated main page')","","    saveAndCopyStats(true || !previewMode)","","    logDelay('Saved stats')","","    if (!previewMode) {","        await generateLinkPreviews()","","        logDelay('Generated link previews')","    }","","    console.log('Website generated in', Date.now() - startTime, 'ms')","","    logDelay.log()","","    process.exit(0)","})()"],"livePreview.js":["const { spawn } = require('bun')","const chokidar = require('chokidar')","const { resolve, join, extname } = require('path')","const fs = require('fs')","import { serve, file as BunFile } from 'bun'","import { lookup as getMimeType } from 'mime-types'","import { WebSocketServer } from 'ws'","","process.chdir('C:\\\\Users\\\\jack\\\\Home\\\\Programming\\\\blog projects\\\\blog generator')","","let permaLines = []","let spawnLogs = []","","const showSpawnLogs = process.argv.includes('logSpawn')","","let generatingWebsite = false","let waitingToGenerateWebsite = false","async function generateWebsite(postsWaitingToGenerateString) {","    const process = spawn({","        cmd: ['bun', 'generateWebsite.js', 'previewMode', postsWaitingToGenerateString],","        stdout: 'pipe',","        stderr: 'pipe'","    })","","    if (showSpawnLogs) {","        for await (const chunk of process.stdout)","            spawnLogs.push(...new TextDecoder().decode(chunk).split('\\n').filter(message => message !== '').map(message => ({ message, time: Date.now(), type: 'log' })))","","        for await (const chunk of process.stderr)","            spawnLogs.push(...new TextDecoder().decode(chunk).split('\\n').filter(message => message !== '').map(message => ({ message, time: Date.now(), type: 'error' })))","    }","","    await process.exited","}","","const colors = {","    reset: '\\x1b[0m',","    bright: '\\x1b[1m',","    dim: '\\x1b[2m',","    underscore: '\\x1b[4m',","    blink: '\\x1b[5m',","    reverse: '\\x1b[7m',","    hidden: '\\x1b[8m',","","    fg: {","        black: '\\x1b[30m',","        red: '\\x1b[31m',","        green: '\\x1b[32m',","        yellow: '\\x1b[33m',","        blue: '\\x1b[34m',","        magenta: '\\x1b[35m',","        cyan: '\\x1b[36m',","        white: '\\x1b[37m',","        crimson: '\\x1b[38m' // Scarlet","    },","    bg: {","        black: '\\x1b[40m',","        red: '\\x1b[41m',","        green: '\\x1b[42m',","        yellow: '\\x1b[43m',","        blue: '\\x1b[44m',","        magenta: '\\x1b[45m',","        cyan: '\\x1b[46m',","        white: '\\x1b[47m',","        crimson: '\\x1b[48m'","    }","}","","// WebSocket server setup","const wss = new WebSocketServer({ port: 3001 })","","wss.on('connection', (ws) => {","    ws.lastPong = 0","    ws.on('message', function (message) {","        if (message.toString() === 'pong')","            ws.lastPong = Date.now()","    })","})","","function getBlogPostDirs(dir) {","    let blogPostDirs = []","","    fs.readdirSync(dir, { withFileTypes: true }).forEach(dirent => {","        const fullPath = join(dir, dirent.name)","        if (dirent.isDirectory()) {","            if (dirent.name === 'node_modules')","                return","            if (dirent.name.startsWith('blogPost_'))","                blogPostDirs.push(fullPath)","            else","                blogPostDirs = blogPostDirs.concat(getBlogPostDirs(fullPath))","        }","    })","","    return blogPostDirs","}","","const blogPostDirs = getBlogPostDirs(resolve(__dirname, '..'))","","const postsWaitingToGenerate = []","permaLines.push(postsWaitingToGenerate)","function updateSite(post, fullRegen) {","    if (fullRegen)","        postsWaitingToGenerate.splice(0, postsWaitingToGenerate.length, ...blogPostDirs)","    if (post && !postsWaitingToGenerate.includes(post))","        postsWaitingToGenerate.push(post)","    if (!generatingWebsite) {","        generatingWebsite = true","        const postsWaitingToGenerateString = JSON.stringify(postsWaitingToGenerate)","        postsWaitingToGenerate.splice(0)","        generateWebsite(postsWaitingToGenerateString).then(() => {","            wss.clients.forEach(client => {","                if (client.readyState === 1)","                    client.send('reload')","            })","            generatingWebsite = false","            if (waitingToGenerateWebsite) {","                waitingToGenerateWebsite = false","                updateSite()","            }","        })","    } else","        waitingToGenerateWebsite = true","}","updateSite(undefined, true)","","let lastChangeTime = 0","chokidar.watch(blogPostDirs, {","    persistent: true,","    ignoreInitial: true","}).on('all', (event, path) => {","    if (event === 'change' || event === 'add' || event === 'unlink') {","        lastChangeTime = Date.now()","        updateSite(`${path.split('blogPost_')[0]}blogPost_${path.split('blogPost_')[1].split('\\\\')[0]}`)","    }","})","","const watchAll = process.argv.includes('watchAll')","if (watchAll)","    chokidar.watch(process.cwd(), {","        persistent: true,","        ignored: /node_modules|mem.json|output|\\.git/,","        ignoreInitial: true","    }).on('all', (event, path) => {","        if (event === 'change' || event === 'add' || event === 'unlink') {","            lastChangeTime = Date.now()","            updateSite(undefined, true)","        }","    })","","const baseDirectory = './output'","","const server = serve({","    async fetch(req) {","        const url = new URL(req.url)","        let path = decodeURIComponent(url.pathname)","","        // Normalize root path to serve index.html","        if (path === '/') {","            path = '/index.html'","        }","","        // Handle favicon requests without throwing an error","        if (path.startsWith('/favicon')) {","            return new Response(null, { status: 204 }); // No Content response","        }","","        // Full file path","        let filePath = join(baseDirectory, path)","","        // Check if the path has an extension to determine if it's a directory","        if (!extname(filePath)) {","            filePath = join(filePath, 'index.html')","        }","","        // Serve the file","        try {","            const file = BunFile(filePath)","            const mimeType = getMimeType(filePath) || 'application/octet-stream'","","            return new Response(file, {","                headers: { 'Content-Type': mimeType }","            })","        } catch (error) {","            console.error(`File not found: ${filePath}`, error)","            return new Response('File not found', { status: 404 })","        }","    }","})","","setInterval(() => {","    wss.clients.forEach(client => {","        if (client.readyState === 1) // 1 means open","            client.send('ping')","    })","}, 100)","","let lastKeyPressTime = 0","","let lastLines = []","let consoleUpdateIndex = 0","const consoleUpdateChars = '⸺⟋|⟍'","function updateConsole() {","    const lines = []","    lines.push(`${colors.bright}[${colors.fg.magenta}${consoleUpdateChars[consoleUpdateIndex]}${colors.fg.white}] LIVE PREVIEW [${colors.fg.magenta}${(consoleUpdateChars[(4 - consoleUpdateIndex) % 4])}${colors.fg.white}]${colors.reset}`)","    lines.push(`${colors.fg.cyan}Hosting site at ${colors.fg.yellow}${colors.underscore}${server.url}${colors.reset}`)","    const numberOfConnections = Array.from(wss.clients).filter(ws => Date.now() - ws.lastPong < 1000).length","    lines.push(`${numberOfConnections === 0 ? colors.fg.red : colors.fg.green}There ${numberOfConnections === 1 ? 'is' : 'are'} ${numberOfConnections} connected websocket${numberOfConnections === 1 ? '' : 's'} for live previewing${colors.reset}`)","    lines.push(`${colors.fg.cyan}Watching ${colors.fg.yellow}${blogPostDirs.length}${colors.fg.cyan} post${blogPostDirs.length === 1 ? '' : 's'}: ${blogPostDirs.map(path => `${colors.fg.yellow}${path.split('blogPost_')[1]}`).join(`${colors.fg.cyan}, `)}${colors.reset}`)","    if (watchAll) lines.push(`${colors.fg.cyan}Watching ${colors.fg.yellow}${process.cwd()}${colors.reset}`)","    if (Date.now() - lastChangeTime < 1000)","        lines.push(`${colors.fg.green}CHANGE DETECTED${colors.reset}`)","    if (generatingWebsite)","        lines.push(`${colors.fg.yellow}GENERATING FOLDER${colors.reset}`)","    if (waitingToGenerateWebsite)","        lines.push(`${colors.fg.red}WAITING TO REGENERATE FOLDER${colors.reset}`)","    if (Date.now() - lastKeyPressTime < 1000)","        lines.push(`${colors.bright}Press CTRL+c to exit${colors.reset}`)","","    lines.push(...permaLines)","        ;","    [...spawnLogs].forEach(log => {","        lines.push(`[SPAWN ${log.type.toUpperCase()}] ${log.message}`)","        if (Date.now() - log.time > 1000)","            spawnLogs.splice(spawnLogs.indexOf(log), 1)","    })","","    lastLines.forEach((line, index) => {","        if (lines.length <= index)","            process.stdout.write(`\\x1b[${index + 1};0H \\x1b[2K`)","    })","","    lines.forEach((line, index) => {","        if (line !== lastLines[index]) {","            process.stdout.write(`\\x1b[${index + 1};0H \\x1b[2K${line}`)","        }","    })","","    lastLines = lines","","    consoleUpdateIndex = (consoleUpdateIndex + 1) % 4","}","process.stdout.write('\\x1B[2J\\x1B[0f')","process.stdout.write('\\x1b[?25l')","setInterval(updateConsole, 100)","updateConsole()","","const readline = require('readline')","","readline.emitKeypressEvents(process.stdin)","","if (process.stdin.isTTY)","    process.stdin.setRawMode(true)","","process.stdin.on('keypress', (str, key) => {","    if (key.ctrl && key.name === 'c') {","        process.stdout.write('\\x1B[2J\\x1B[0f')","        process.stdout.write(`\\x1b[0;0H \\x1b[2K`)","        process.stdout.write('\\x1b[?25h')","        process.exit()","    }","    lastKeyPressTime = Date.now()","})"],"livePreviewInjection.js":["let ws","let lastPing = 0","function heartbeat() {","    if (Date.now() - lastPing >= 1000) {","        ws = new WebSocket('ws://localhost:3001')","        ws.onmessage = (event) => {","            if (event.data === 'reload') location.reload()","            else if (event.data === 'ping' && ws.readyState == 1) {","                lastPing = Date.now()","                ws.send('pong')","            }","        }","    }","","    //This line causes a crash with bun, but will make the websites auto reconnect when bun stops crashing.","    setTimeout(heartbeat, 100)","}","heartbeat()"],"markup.js":["function cssRuleFromStyles(defaultStyle, style, scale = 1) {","    let out = []","    Object.keys(style).forEach(key => {","        if (defaultStyle[key] != style[key]) {","            const value = style[key]","            if (key == 'color')","                out.push(`color:${value}`)","            else if (key == 'italic')","                out.push(`font-style:${value ? 'italic' : 'normal'}`)","            else if (key == 'bold')","                out.push(`font-weight:${value ? 'bold' : 'normal'}`)","            else if (key == 'size')","                if (scale == 1)","                    out.push(`font-size:${value}`)","                else","                    out.push(`font-size:calc(${value} * ${scale})`)","            else if (key == 'strike')","                out.push(`text-decoration: ${value ? 'line-through' : 'none'}`)","        }","    })","    return out.join('; ') + ';'","}","","function err(message) {","    throw new Error(`Error parsing markup: ${message}`)","}","","//some helper functions to make more readable code","","/**"," * charAt + toLowerCase"," */","const lca = (str, i) => str.charAt(i).toLowerCase()","","/**"," * slice + toLowerCase"," */","const ls = (str, start, stop) => str.slice(start, stop).toLowerCase()","","//used so I can check nextProp without it existing","const emptyString = new Array(2 ** 16).fill(' ').join('')","","//the script injected into the output html","function script() {","    (() => {","        const wrapper = document.currentScript.parentNode","        function setValue(key, value) {","            let saveData = sessionStorage.getItem('markup') != undefined ? JSON.parse(sessionStorage.getItem('markup')) : {}","            saveData[key] = value","            sessionStorage.setItem('markup', JSON.stringify(saveData))","        }","        function getValue(key) {","            return (sessionStorage.getItem('markup') != undefined ? JSON.parse(sessionStorage.getItem('markup')) : {})[key]","        }","        function removeKey(key) {","            let saveData = sessionStorage.getItem('markup') != undefined ? JSON.parse(sessionStorage.getItem('markup')) : {}","            delete saveData[key]","            sessionStorage.setItem('markup', JSON.stringify(saveData))","        }","        document.addEventListener('DOMContentLoaded', () => {","            [...wrapper.getElementsByClassName('folder')].forEach(folder => {","                if (getValue(`id_${folder.dataset.id}`) != undefined) {","                    const children = folder.children","                    const open = getValue(`id_${folder.dataset.id}`)","                    children[0].innerHTML = children[0].innerHTML.replace(open ? 'open' : 'close', open ? 'close' : 'open')","                    children[1].style.display = open ? '' : 'none'","                }","            })","        })","        if (window.markup == undefined) {","            window.markup = {","                folder(event) {","                    event.stopPropagation()","                    const folder = event.target.closest('.folder')","                    const children = folder.children","                    const open = children[1].style.display == 'none'","                    children[0].innerHTML = children[0].innerHTML.replace(open ? 'open' : 'close', open ? 'close' : 'open')","                    children[1].style.display = open ? '' : 'none'","                    setValue(`id_${folder.dataset.id}`, open)","                }","            }","        }","    })()","}","","function splitMarkup(rawMarkup) {","    return rawMarkup.split('<').join('&lt').split('\\r\\n').filter(line => line.slice(0, 10) != '|[COMMENT]').join('').split('|[').filter(part => part != '').map(part => {","        if (part.slice(0, 1) == '|') return '|[' + part.slice(1)","        if (part.includes(']')) return [[part.slice(0, part.indexOf(']'))], part.slice(part.indexOf(']') + 1)]","        return part","    }).flat(1).reduce((acc, part) => {","        if (typeof part == 'string')","            if (acc.length > 0 && typeof acc[acc.length - 1] == 'string') {","                acc[acc.length - 1] += part","                return acc","            }","            else","                return [...acc, part]","        while (part.some(part => part.includes(' ')))","            part = part.map(part => part.split(' ')).flat()","        let inPar = false","        part = part.reduce((acc, part) => {","            if (inPar)","                acc[acc.length - 1] += ' ' + part","            else acc = [...acc, part]","            if (part.indexOf('(') > -1)","                inPar = part.indexOf('(') > part.indexOf(')')","            else","                inPar = part.indexOf(')') == -1 && inPar","            return acc","        }, [])","        part = part.filter(item => item != '')","        if (part.length == 0)","            return acc","        else","            return [...acc, part]","    }, []).filter(part => part != '')","}","","let nextGlobalId = 0 //used for anything that needs a unique identifier","","module.exports = {","    defaultStyle: {","        color: '#0f0',","        italic: false,","        bold: false,","        size: 'medium',","        code: false,","        align: 'left',","        showMarkup: false,","        strike: false","    },","    tabSize: 3,","    stripTags(rawMarkup) {","        return splitMarkup(rawMarkup).map(item => typeof item === 'string' ? item : item.filter(subItem => subItem === 'break').map(() => '<br>').join('')).join('')","    },","    /**","     * Translates markup into html.","     * @param {String} rawMarkup ","     * @param {Number} scale ","     * @param {String[]} classes any classes to add to the wrapper","     * @returns HTML","     */","    translate(rawMarkup, scale = 1, classes = []) {","        const markup = splitMarkup(rawMarkup)","","        let defaultStyle = { ...this.defaultStyle }","","        let style = { ...defaultStyle }","","        let lastAlign","","        let folds = []","","        let needScript = false","","        let html = ''","","        let nextLine = ''","","        markup.forEach(props => {","            if (typeof props == 'string') {","                if (style.align != lastAlign) {","                    if (lastAlign != undefined)","                        html += '</div>'","                    html += `<div style=\"text-align:${style.align};\">`","                    lastAlign = style.align","                }","                const cssRules = cssRuleFromStyles(defaultStyle, style, scale)","                let text = nextLine + props","                if (style.code) text = `<code>${text}</code>`","                if (cssRules.length == 1) //take the ; into account","                    html += text","                else","                    html += `<span style=\"${cssRules}\">${text}</span>`","                nextLine = ''","            } else {","                if (style.showMarkup)","                    nextLine += `|[${props.join(' ')}]`","                for (let index = 0; index < props.length; index++) {","                    const prop = props[index]","                    const nextProp = props[index + 1] ?? emptyString","                    const lowerProp = prop.toLowerCase()","","                    if (lowerProp == 'color') {","                        if (ls(nextProp, 0, 1) == '#') { //must be hex","                            if (nextProp.length == 4) //is in format #rgb","                                style.color = nextProp.toLowerCase()","                            else if (nextProp.length == 5) //is in format #rgba","                                if (ls(nextProp, 4, 5) == 'f') //check if alpha is needed","                                    style.color = ls(str, 0, 4)","                                else","                                    style.color = nextProp.toLowerCase()","                            else if (nextProp.length == 7) //is in format #rrggbb","                                if (lca(nextProp, 1) == lca(nextProp, 2) && lca(nextProp, 3) == lca(nextProp, 4) && lca(nextProp, 5) == lca(nextProp, 6)) //check if the color can be shortened","                                    style.color = ('#' + lca(nextProp, 1) + lca(nextProp, 3) + lca(nextProp, 5)).toLowerCase()","                                else","                                    style.color = nextProp.toLowerCase()","                            else if (nextProp.length == 9) //is in format #rrggbbaa","                                if (nextProp.slice(7, 9).toLowerCase() == 'ff') //check if alpha is needed","                                    if (lca(nextProp, 1) == lca(nextProp, 2) && lca(nextProp, 3) == lca(nextProp, 4) && lca(nextProp, 5) == lca(nextProp, 6)) //check if the color can be shortened","                                        style.color = ('#' + lca(nextProp, 1) + lca(nextProp, 3) + lca(nextProp, 5)).toLowerCase()","                                    else","                                        style.color = nextProp.slice(0, 7).toLowerCase()","                                else","                                    if (lca(nextProp, 1) == lca(nextProp, 2) && lca(nextProp, 3) == lca(nextProp, 4) && lca(nextProp, 5) == lca(nextProp, 6) && lca(nextProp, 7) == lca(nextProp, 8)) //check if the color can be shortened","                                        style.color = ('#' + lca(nextProp, 1) + lca(nextProp, 3) + lca(nextProp, 5) + lca(nextProp, 7)).toLowerCase()","                                    else","                                        style.color = nextProp.toLowerCase()","                            else err(`invalid hex code`)","                        } else if (ls(nextProp, 0, 3) == 'rgb') {","                            try {","                                const digits = nextProp.toLowerCase().slice(lca(nextProp, 3) == 'a' ? 5 : 4).split(')')[0].split(',').map(digit => Math.max(0, Math.min(255, Math.round(Number(digit.trim())))).toString(16).padStart(2, '0')).filter((digit, index) => digit != 'ff' || index != 3)","                                if (digits.every(digit => digit.charAt(0) == digit.charAt(1)))","                                    style.color = '#' + digits.reduce((acc, digit) => acc + digit.charAt(0), '')","                                else","                                    style.color = '#' + digits.reduce((acc, digit) => acc + digit, '')","                            } catch {","                                err('invalid rgb')","                            }","                        } else","                            style.color = defaultStyle.color","                    }","","                    else if (lowerProp == 'italic') {","                        if (['on', 'true'].includes(nextProp.toLowerCase()))","                            style.italic = true","                        else if (['off', 'false'].includes(nextProp.toLowerCase()))","                            style.italic = false","                        else","                            style.italic = !style.italic","                    }","","                    else if (lowerProp == 'bold') {","                        if (['on', 'true'].includes(nextProp.toLowerCase()))","                            style.bold = true","                        else if (['off', 'false'].includes(nextProp.toLowerCase()))","                            style.bold = false","                        else","                            style.bold = !style.bold","                    }","","                    else if (lowerProp == 'space') {","                        try {","                            const count = Math.round(Number(nextProp))","                            if (count > 0 && !isNaN(count))","                                nextLine += new Array(count).fill('&nbsp;').join('')","                            else","                                nextLine += '&nbsp;'","                        } catch {","                            nextLine += '&nbsp;'","                        }","                    }","","                    else if (lowerProp == 'tab') {","                        try {","                            const count = Math.round(Number(nextProp) * this.tabSize)","                            if (count > 0 && !isNaN(count))","                                nextLine += new Array(count).fill('&nbsp;').join('')","                            else","                                nextLine += new Array(this.tabSize).fill('&nbsp;').join('')","                        } catch {","                            nextLine += new Array(this.tabSize).fill('&nbsp;').join('')","                        }","                    }","","                    else if (lowerProp == 'break') {","                        if (Number(nextProp) > 0)","                            nextLine += `<div style=\"display:block; height:${Number(nextProp)}em; line-height:${Number(nextProp)}em;\"></div>`","                        else","                            nextLine += '<br>'","                    }","","                    else if (lowerProp == 'size') {","                        if (['xx-small', 'x-small', 'smaller', 'small', 'medium', 'large', 'larger', 'x-large', 'xx-large'].includes(nextProp.toLowerCase()))","                            style.size = nextProp.toLowerCase()","                        else if (Number(nextProp) > 0)","                            style.size = `${Number(nextProp)}px`","                        else","                            style.size = defaultStyle.size","                    }","","                    else if (lowerProp == 'code') {","                        if (['on', 'true'].includes(nextProp.toLowerCase()))","                            style.code = true","                        else if (['off', 'false'].includes(nextProp.toLowerCase()))","                            style.code = false","                        else","                            style.code = !style.code","                    }","","                    else if (lowerProp == 'align') {","                        if (['left', 'center', 'right'].includes(nextProp.toLowerCase()))","                            style.align = nextProp.toLowerCase()","                        else","                            style.align = defaultStyle.align","                    }","","                    else if (lowerProp == 'reset') {","                        if (Object.keys(defaultStyle).includes(nextProp.toLowerCase()))","                            style[nextProp.toLowerCase()] = defaultStyle[nextProp.toLowerCase()]","                        else","                            Object.keys(defaultStyle).forEach(key => style[key] = defaultStyle[key])","","                    }","","                    else if (lowerProp == 'default') {","                        if (nextProp.toLowerCase() == 'global')","                            Object.keys(style).forEach(key => this.defaultStyle[key] = style[key])","                        Object.keys(style).forEach(key => defaultStyle[key] = style[key])","                    }","","                    else if (lowerProp == 'fold') {","                        needScript = true","                        if (['open', 'close'].includes(nextProp.toLowerCase())) {","                            let foldId = folds.length + 1","                            while (rawMarkup.includes(`fold_${foldId}`))","                                foldId++","                            folds.push({","                                id: foldId,","                                style: { ...style },","                                open: nextProp.toLowerCase() == 'open'","                            })","                            if (lastAlign != undefined)","                                html += '</div>'","                            html += `fold_${foldId}`","                            html += `<div style=\"text-align:${style.align};\">`","                        } else {","                            if (lastAlign != undefined)","                                html += '</div>'","                            lastAlign = undefined //to make the next line trigger a new block","                            const fold = folds.pop()","                            const content = html.split(`fold_${fold.id}`)[1]","                            html = html.slice(0, html.indexOf(`fold_${fold.id}`))","                            const cssRules = cssRuleFromStyles(defaultStyle, fold.style, scale)","                            let text = `|[click to ${fold.open ? 'close' : 'open'}]`","                            if (style.code) text = `<code>${text}</code>`","                            if (cssRules.length != 1)","                                text = `<span style=\"${cssRules}\">${text}</span>`","","                            html += `","                            <div class=\"folder\" data-id=${nextGlobalId++}>","                                <div style=\"cursor: pointer; text-align:${fold.style.align};\" onclick=\"window.markup.folder(event)\">","                                    ${text}","                                </div>","                                <div ${fold.open ? '' : 'style=\"display:none;\"'}>","                                    ${content}","                                </div>","                            </div>","                            `","                        }","                    }","","                    else if (lowerProp == 'image') {","                        if (style.align != lastAlign) {","                            if (lastAlign != undefined)","                                html += '</div>'","                            html += `<div style=\"text-align:${style.align};\">`","                            lastAlign = style.align","                        }","                        if (props.length > index + 1 && Number(props[index + 2]) > 0 && Number(props[index + 2] != 1))","                            html += `<br><img src=\"./${nextProp}\" alt=\"${nextProp}\" style=\"width:${Number(props[index + 2] * 100)}%\">`","                        else","                            html += `<br><img src=\"./${nextProp}\" alt=\"${nextProp}\">`","                    }","","                    else if (lowerProp == 'showmarkup') {","                        if (['on', 'true'].includes(nextProp.toLowerCase()))","                            style.showMarkup = true","                        else if (['off', 'false'].includes(nextProp.toLowerCase()))","                            style.showMarkup = false","                        else","                            style.showMarkup = !style.showMarkup","                    }","","                    else if (lowerProp == 'video') {","                        if (style.align != lastAlign) {","                            if (lastAlign != undefined)","                                html += '</div>'","                            html += `<div style=\"text-align:${style.align};\">`","                            lastAlign = style.align","                        }","                        if (props.length > index + 1 && Number(props[index + 2]) > 0 && Number(props[index + 2] != 1))","                            html += `<br><video src=\"./${nextProp}\" controls alt=\"${nextProp}\" style=\"width:${Number(props[index + 2] * 100)}%\"></video>`","                        else","                            html += `<br><video src=\"./${nextProp}\" controls alt=\"${nextProp}\"></video>`","                    }","","                    else if (lowerProp == 'strike') {","                        if (['on', 'true'].includes(nextProp.toLowerCase()))","                            style.strike = true","                        else if (['off', 'false'].includes(nextProp.toLowerCase()))","                            style.strike = false","                        else","                            style.strike = !style.strike","                    }","","                    else if (lowerProp == 'script' && nextProp != undefined) {","                        nextLine += `<script src=\"${nextProp}\"></script>`","                    }","                }","            }","        })","","        if (nextLine != '') {","            if (style.align != lastAlign) {","                if (lastAlign != undefined)","                    html += '</div>'","                html += `<div style=\"text-align:${style.align};\">`","                lastAlign = style.align","            }","            const cssRules = cssRuleFromStyles(defaultStyle, style, scale)","            if (style.code) nextLine = `<code>${nextLine}</code>`","            if (cssRules.length == 1) //take the ; into account","                html += nextLine","            else","                html += `<span style=\"${cssRules}\">${nextLine}</span>`","        }","","        if (lastAlign != undefined)","            html += '</div>'","","        let wrapperStyle = cssRuleFromStyles({}, defaultStyle, scale)","        wrapperStyle += [","            'margin:0',","            'padding:0',","            'word-wrap:break-word',","            'width:100%',","            'height:100%'","        ].join('; ') + ';'","","        const scriptString = script.toString().slice(12).split('\\r\\n').reduce((acc, part) => acc + '; ' + part.split('//')[0], '').split('').reduce((acc, part, index, arr) => {","            if (index >= arr.length - 3) return acc","            if (part == ' ' && acc.charAt(acc.length - 1) == ' ')","                return acc","            return acc + part","        }, '').split('{; ').join('{').split('; }').join('}').split('; ').reduce((acc, part) => {","            if (acc.slice(acc.length - 2) == '; ' && part == '') return acc","            return acc + part + '; '","        }, '')","","        return `","        <div class=\"${['markup', ...classes].join(' ')}\" style=\"${wrapperStyle}\">${needScript ? `\\r\\n<script>${scriptString}</script>` : ''}","            ${html}","        </div>","        `","    }","}","","/**","This markup uses tags in |[] clumps mixed with text to style. ","the text is evaluated from beginning to end, any text being rendered using the current style.","to change the style, add |[] with tags and values inside, this sets the style for everything after, until changes.","tags are evaluated by order they appear, in a |[].","tags are found by scanning for |[ and reading until ], and are separated by spaces.","to render a |[ you can put |[|, this will not read tags like normal.","you can put ] anywhere, and unless it is closing a tag area it will render.","the tags are below, items in the first column are the keywords, items in the second column are values to be used.","a !-> in the second column indicates the action that happens if non of the other options are there","values in the second column with a [] signify that you put a value there (but don't include the [])","values in the second column with a ?[] signify that the value is optional",""," * color: -> sets the text color to the most efficient hex value that represents prop 1"," * * #[rgb] -> each range is in the value 0-f in base 16"," * * #[rgba]"," * * #[rrggbb]"," * * #[rrggbbaa]"," * * rgb([r],[g],[b]) -> each value is in the range 0-255"," * * rgb([r],[g],[b],[a])"," * * rgba([r],[g],[b])"," * * rgba([r],[g],[b],[a])"," * * !-> sets color to the default color"," * italic: -> sets whether text will be italic"," * * on | true"," * * off | false"," * * !-> toggles italics"," * bold: -> sets whether text will be bold"," * * on | true"," * * off | false"," * * !-> toggles bold text"," * space: -> adds [number] spaces using '&nbsp;' after"," * * [number]"," * * !-> defaults to 1"," * tabs: -> adds [number] spaces * tabSize (defaults to 3) after"," * * [number]"," * * !-> defaults to 1"," * break: -> used to make new lines"," * * [number] -> creates a break and then inserts a blank line of [number] lines in height, then second break"," * * !-> just adds <br>"," * size: -> sets the text size"," * * xx-small | x-small | smaller | small | medium | large | larger | x-large | xx-large -> uses the default sizes"," * * [number] -> (viewport width + viewport height) / 2 * [number], [number] is in the range [number] >= 0.02"," * * !-> sets size to the default size"," * code: -> sets whether text will be code using <code></code>"," * * on | true"," * * off | false"," * * !-> toggles code text"," * align: -> sets which direction text should align (changing align triggers a break)"," * * left | center | right"," * * !-> sets align to the default align"," * reset: "," * * [property] -> sets [property] to the default [property]"," * * !-> resets the full style to the default style"," * default: -> changes the default used for many tags, but does not change the default retrospectively"," * * global -> sets the global default, this is the default used to generate the local (the default always used) default, also sets the local default "," * * !-> sets the default style to the current style"," * fold: -> creates foldable content, with all content until the fold close being inside (fold triggers a break)"," * * open | close -> starts a fold that is open | closed at start"," * * !-> closes a fold"," * image: -> embeds an image in the next line"," * * [path] [size] -> size is relative to the div, so a size of 1 would fill the space, or a size of .5 could fit two images side by side"," * * [path] !-> defaults to 1"," * showMarkup: -> sets whether the markup tags will be hidden (defaults to false)"," * * on | true"," * * off | false"," * * !-> toggles"," * COMMENT: -> \"comments\" out the line, must be alone in the tag bracket, and the first thing in the line: |[COMMENT]"," * video: -> embeds a video in the next line"," * * [path] [size] -> size is relative to the div, so a size of 1 would fill the space, or a size of .5 could fit two videos side by side"," * * [path] !-> defaults to 1"," * strike: -> sets whether text will have strikethrough"," * * on | true"," * * off | false"," * * !-> toggles strikethrough"," * script: -> embeds a piece of live code"," * * [path] -> where to find the script","","","for example: to create 'before green it was boring' with 'green' being green you could use the following markup:","before |[color #0f0]green|[color] it was boring","the first tag clump sets the color to green (#0f0), the second clump resets color to the default"," */"],"output\\backgroundManager.js":["const backgroundPaths = [\"./posts/Making a custom blog/background.js\",\"./backgrounds/fireworks.js\",\"./backgrounds/hiddenSnakes.js\",\"./backgrounds/pong.js\",\"./backgrounds/rain.js\",\"./backgrounds/randomSymbols.js\",\"./backgrounds/uniqueCode.js\"];","document.addEventListener('DOMContentLoaded', async () => {","    function mixPaths() {","        const lastPath = backgroundPaths[backgroundPaths.length - 1]","        do backgroundPaths.sort(() => Math.random() * 2 - 1)","        while (backgroundPaths.length > 1 && backgroundPaths[0] == lastPath)","    }","    mixPaths()","","    let backgroundIndex = -1","","    const minTimePerBackground = 1000 * 30","    const blurTime = 1000 * 1","    let backgroundStarted = 0","","    let blurred = false","","    let cycle = true","","    let currentBackground = {}","","    let loadedBackgrounds = []","","    const maxUps = 60","    let lastUpdate = 0","","    async function update() {","        lastUpdate = Date.now()","","        const canvas = document.getElementById('backgroundCanvas')","        const ctx = canvas.getContext('2d')","","        if (cycle && minTimePerBackground - (Date.now() - backgroundStarted) <= blurTime && !blurred) {","            canvas.classList.add('blur')","            blurred = true","        }","","        if (cycle && Date.now() - backgroundStarted >= minTimePerBackground) {","            if (currentBackground.stop != undefined) await currentBackground.stop(canvas, ctx)","            backgroundIndex = (backgroundIndex + 1) % backgroundPaths.length","            if (backgroundIndex == 0) mixPaths()","            if (!loadedBackgrounds.includes(backgroundPaths[backgroundIndex])) await new Promise(r => {","                const script = document.createElement('script')","                script.type = 'module'","                script.src = backgroundPaths[backgroundIndex]","                script.onload = r","                document.head.appendChild(script)","                loadedBackgrounds.push(backgroundPaths[backgroundIndex])","            })","            currentBackground = await import(backgroundPaths[backgroundIndex])","            if (currentBackground.start != undefined) await currentBackground.start(canvas, ctx)","            canvas.classList.remove('blur')","            blurred = false","            backgroundStarted = Date.now()","        }","        if (currentBackground.update != undefined) await currentBackground.update(canvas, ctx)","","        //has to be set after the first update so the first background will always get loaded","        cycle = (backgroundPaths.length > 1)","","        requestAnimationFrame(() => setTimeout(update, 1000 / maxUps - (Date.now() - lastUpdate)))","    }","    update()","})"],"output\\backgrounds\\fireworks.js":["const fontSize = (/android|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini/i).test(navigator.userAgent || navigator.vendor || window.opera) ? 50 : 25","","let [width, height] = [0, 0]","","let [lastWidth, lastHeight] = [0, 0]","","let grid = [[]]","","function fillGrid(canvas, ctx) {","    width = canvas.width = window.innerWidth","    height = canvas.height = window.innerHeight","","    grid = [...grid, ...new Array(Math.ceil(width / fontSize)).fill(0).map(() => [])].splice(0, Math.ceil(width / fontSize) + 1).map(colum => [...colum, ...new Array(Math.ceil(height / fontSize)).fill(0)].splice(0, Math.ceil(height / fontSize) + 1))","","    ctx.fillStyle = '#000'","    ctx.fillRect(0, 0, width, height)","    ctx.font = `${fontSize}px 'Fira Code'`","    ctx.textBaseline = 'top'","","    for (let x = 0; x < width / fontSize; x++)","        for (let y = 0; y < height / fontSize; y++) {","            ctx.fillStyle = 'rgb(0,50,0)'","            ctx.fillText('0', x * fontSize, y * fontSize)","        }","}","","let fireworks = []","let lastFirework = 0","","export function update(canvas, ctx) {","    if (lastWidth != window.innerWidth || lastHeight != innerHeight)","        fillGrid(canvas, ctx)","    lastWidth = window.innerWidth","    lastHeight = window.innerHeight","","    ctx.font = `${fontSize}px 'Fira Code'`","    ctx.textBaseline = 'top'","","    if (Date.now() - lastFirework >= 1000) {","        lastFirework = Date.now()","        fireworks.push({","            x: Math.floor(Math.random() * grid.length),","            y: Math.floor(Math.random() * grid[0].length),","            counter: 0,","            radius: 1,","            maxRadius: Math.ceil(Math.random() * 15 + 10),","            speed: Math.ceil(Math.random() * 10)","        })","    }","","    fireworks.forEach((firework, index) => {","        for (let x = Math.max(firework.x - firework.radius, 0); x < Math.min(firework.x + firework.radius, grid.length); x++)","            for (let y = Math.max(firework.y - firework.radius, 0); y < Math.min(firework.y + firework.radius, grid[0].length); y++) {","                const distance = Math.abs(x - firework.x) + Math.abs(y - firework.y) + 1","                if (distance <= firework.radius) {","                    ctx.fillStyle = '#000'","                    ctx.fillRect(x * fontSize, y * fontSize, fontSize, fontSize)","                    ctx.fillStyle = `rgb(0,${255 - firework.radius * (205 / firework.maxRadius)},0)`","                    ctx.fillText(distance < firework.radius ? '0' : '1', x * fontSize, y * fontSize)","                }","            }","        if (firework.radius == firework.maxRadius) {","            for (let x = Math.max(firework.x - firework.radius, 0); x < Math.min(firework.x + firework.radius, grid.length); x++)","                for (let y = Math.max(firework.y - firework.radius, 0); y < Math.min(firework.y + firework.radius, grid[0].length); y++)","                    if (Math.abs(x - firework.x) + Math.abs(y - firework.y) <= firework.radius) {","                        ctx.fillStyle = '#000'","                        ctx.fillRect(x * fontSize, y * fontSize, fontSize, fontSize)","                        ctx.fillStyle = 'rgb(0,50,0)'","                        ctx.fillText('0', x * fontSize, y * fontSize)","                    }","            fireworks.splice(index, 1)","        } else if ((firework.counter = (firework.counter + 1) % firework.speed) == 0) firework.radius++","    })","","}","export function start(canvas, ctx) {","    grid = [[]]","    fillGrid(canvas, ctx)","}"],"output\\backgrounds\\hiddenSnakes.js":["const fontSize = (/android|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini/i).test(navigator.userAgent || navigator.vendor || window.opera) ? 50 : 25","","let [width, height] = [0, 0]","","let [lastWidth, lastHeight] = [0, 0]","","let grid = [[]]","","let snakes = []","","function fillGrid(canvas, ctx) {","    width = canvas.width = window.innerWidth","    height = canvas.height = window.innerHeight","","    grid = [...grid, ...new Array(Math.ceil(width / fontSize)).fill(0).map(() => [])].splice(0, Math.ceil(width / fontSize) + 1).map(colum => [...colum, ...new Array(Math.ceil(height / fontSize)).fill(50)].splice(0, Math.ceil(height / fontSize) + 1))","","    ctx.fillStyle = '#000'","    ctx.fillRect(0, 0, width, height)","    ctx.font = `${fontSize}px 'Fira Code'`","    ctx.textBaseline = 'top'","","    for (let x = 0; x < width / fontSize; x++)","        for (let y = 0; y < height / fontSize; y++) {","            ctx.fillStyle = `rgb(0,${grid[x][y]},0)`","            ctx.fillText('0', x * fontSize, y * fontSize)","        }","}","","export function update(canvas, ctx) {","    if (lastWidth != window.innerWidth || lastHeight != innerHeight)","        fillGrid(canvas, ctx)","    lastWidth = window.innerWidth","    lastHeight = window.innerHeight","","    ctx.font = `${fontSize}px 'Fira Code'`","    ctx.textBaseline = 'top'","","    let snake = snakes[Math.floor(Math.random() * snakes.length)]","    let tailX = snake[snake.length - 1].x","    let tailY = snake[snake.length - 1].y","    grid[tailX][tailY] -= 25","    ctx.fillStyle = '#000'","    ctx.fillRect(tailX * fontSize, tailY * fontSize, fontSize, fontSize)","    ctx.fillStyle = `rgb(0,${grid[tailX][tailY]},0)`","    ctx.fillText('0', tailX * fontSize, tailY * fontSize)","    for (let index = snake.length - 1; index > 0; index--) {","        snake[index] = { ...snake[index - 1] }","    }","    let headX = snake[0].x","    let headY = snake[0].y","    let hasMoved = false","    let trys = 0","    while (!hasMoved) {","        trys++","        switch (Math.floor(Math.random() * 4)) {","            case 0:","                if (headX > 0 && (snake[2].x != headX - 1 || trys > 50)) {","                    snake[0].x--","                    hasMoved = true","                }","                break","            case 1:","                if (headY > 0 && (snake[2].y != headY - 1 || trys > 50)) {","                    snake[0].y--","                    hasMoved = true","                }","                break","            case 2:","                if (headX + 1 < grid.length && (snake[2].x != headX + 1 || trys > 50)) {","                    snake[0].x++","                    hasMoved = true","                }","                break","            case 3:","                if (headY + 1 < grid[0].length && (snake[2].y != headY + 1 || trys > 50)) {","                    snake[0].y++","                    hasMoved = true","                }","                break","        }","    }","    grid[snake[0].x][snake[0].y] += 50","    ctx.fillStyle = '#000'","    ctx.fillRect(headX * fontSize, headY * fontSize, fontSize, fontSize)","    ctx.fillStyle = `rgb(0,${grid[headX][headY]},0)`","    ctx.fillText('1', headX * fontSize, headY * fontSize)","}","","export function start(canvas, ctx) {","    grid = [[]]","    fillGrid(canvas, ctx)","","    snakes = new Array(3).fill(0).map(() => new Array(25).fill(0).map(() => ({ x: Math.floor(Math.random() * grid.length), y: Math.floor(Math.random() * grid[0].length) })))","}"],"output\\backgrounds\\pong.js":["const fontSize = (/android|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini/i).test(navigator.userAgent || navigator.vendor || window.opera) ? 50 : 25","","let [width, height] = [0, 0]","","let [lastWidth, lastHeight] = [0, 0]","","let balls = new Array(fontSize == 50 ? 2 : 5).fill(0)","let paddles = [0, 0]","","let paddleSize","","function resetCanvas(canvas, ctx) {","    width = canvas.width = window.innerWidth","    height = canvas.height = window.innerHeight","","    ctx.fillStyle = '#000'","    ctx.fillRect(0, 0, width, height)","    ctx.font = `${fontSize}px 'Fira Code'`","    ctx.textBaseline = 'top'","","    ctx.fillStyle = 'rgb(0,50,0)'","    for (let x = 0; x < width / fontSize; x++)","        for (let y = 0; y < height / fontSize; y++)","            ctx.fillText('0', x * fontSize, y * fontSize)","}","","const dirs = [{ x: 0, y: 0 }, { x: 1, y: 0 }, { x: -1, y: 0 }, { x: 0, y: 1 }, { x: 0, y: -1 }]","","export function update(canvas, ctx) {","    if (lastWidth != window.innerWidth || lastHeight != innerHeight)","        resetCanvas(canvas, ctx)","    lastWidth = window.innerWidth","    lastHeight = window.innerHeight","","    for (let x of [0, Math.floor(width / fontSize - 1)]) {","        ctx.fillStyle = '#000'","        ctx.fillRect(x * fontSize, 0, fontSize, height)","        ctx.fillStyle = 'rgb(0,50,0)'","        for (let y = 0; y < height / fontSize; y++)","            ctx.fillText('0', x * fontSize, y * fontSize)","    }","    balls.forEach(ball =>","        dirs.forEach(dir => {","            ctx.fillStyle = '#000'","            ctx.fillRect((ball.lx + dir.x) * fontSize, (ball.ly + dir.y) * fontSize, fontSize, fontSize)","","            ctx.fillStyle = 'rgb(0,50,0)'","            ctx.fillText('0', (ball.lx + dir.x) * fontSize, (ball.ly + dir.y) * fontSize)","        })","    )","    ctx.fillStyle = 'rgb(0,255,0)'","    balls.forEach(ball =>","        dirs.forEach(dir => {","            ctx.fillStyle = '#000'","            ctx.fillRect((ball.x + dir.x) * fontSize, (ball.y + dir.y) * fontSize, fontSize, fontSize)","","            ctx.fillStyle = 'rgb(0,255,0)'","            ctx.fillText('1', (ball.x + dir.x) * fontSize, (ball.y + dir.y) * fontSize)","        })","    )","","    ctx.fillStyle = 'rgb(0,255,0)'","    paddles.forEach((paddle, index) => {","        ctx.fillStyle = '#000'","        ctx.fillRect(index * Math.floor(width / fontSize - 1) * fontSize, paddle * fontSize, fontSize, paddleSize * fontSize)","","        ctx.fillStyle = '#0f0'","        for (let i = 0; i < paddleSize; i++) {","            ctx.fillText('1', index * Math.floor(width / fontSize - 1) * fontSize, (paddle + i) * fontSize)","        }","    })","    balls.forEach(ball => {","        ball.lx = ball.x","        ball.ly = ball.y","","        ball.x += ball.sx","        ball.y += ball.sy","","        if (ball.x == 0) ball.sx = 1","        if (ball.y == 0) ball.sy = 1","        if (ball.x == Math.floor(width / fontSize) - 2) ball.sx = -1","        if (ball.y == Math.floor(height / fontSize) - 2) ball.sy = -1","    })","","    balls.sort((a, b) => (a.sx * width + a.x) - (b.sx * width + b.x))","    paddles[0] -= Math.max(-3, Math.min(3, paddles[0] - (balls[0].y - (paddleSize - 1) / 2)))","","    balls.unshift(balls.pop())","    paddles[1] -= Math.max(-3, Math.min(3, paddles[1] - (balls[0].y - (paddleSize - 1) / 2)))","}","","export function start(canvas, ctx) {","    resetCanvas(canvas, ctx)","    for (let i = 0; i < balls.length; i++) {","        balls[i] = {}","        balls[i].sx = Math.floor(Math.random() * 2) * 2 - 1","        balls[i].sy = Math.floor(Math.random() * 2) * 2 - 1","        balls[i].x = Math.round(width / fontSize / 2) + Math.round((i - balls.length / 2 + .5) * width / fontSize / balls.length / 2)","        balls[i].y = Math.round(height / fontSize / 2) + Math.round((Math.random() * 2 - 1) * (height / fontSize / 3))","        balls[i].lx = balls[i].x","        balls[i].ly = balls[i].y","    }","    paddles.map(() => Math.round(height / fontSize / 2))","    paddleSize = Math.round(height / fontSize / 3 / 2) * 2 + 1","}"],"output\\backgrounds\\rain.js":["const fontSize = (/android|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini/i).test(navigator.userAgent || navigator.vendor || window.opera) ? 50 : 25","","let [width, height] = [0, 0]","","let [lastWidth, lastHeight] = [0, 0]","","let columns = []","let offsets = []","","let words","","let needWords = false","","fetch('./mem.json')","    .then(response => response.json())","    .then(data => {","        const specialChars = '`~!@#$%^&*()_-+={[}]|\\\\:;\"\\'<,>.?/1234567890'.split('')","        words = data.uniqueLines.join(' ')","        while (specialChars.some(char => words.includes(char)))","            specialChars.forEach(char =>","                words = words.split(char).join(' ')","            )","        words = words.split(' ').filter(word => word != '')","","        if (needWords) {","            for (let i = 0; i < height * 2; i += fontSize)","                columns.forEach((colum, index) => drip(colum, index))","            needWords = false","        }","    })","    .catch(error => {","        console.error('Error fetching mem for stats:', error)","    })","","","function fillColumns() {","    columns = [...columns, ...new Array(Math.ceil(width / fontSize)).fill(0).map(() => [])].splice(0, Math.ceil(width / fontSize))","    offsets = [...offsets, ...new Array(Math.ceil(width / fontSize)).fill(0)].splice(0, Math.ceil(width / fontSize))","}","","function drip(colum, index) {","    if (Math.random() < .1) {","        if (offsets[index] == 0) {","            const word = (words[Math.floor(Math.random() * words.length)] + '   ').split('')","            offsets[index] = word.length","            const color = `rgb(0,${Math.round(Math.random() * 205) + 50},0)`","            word.forEach((char, index) => colum.unshift([word[word.length - index - 1], color]))","        } else","            offsets[index]--","    } else if (offsets[index] > 0) offsets[index]--","    else colum.unshift([''])","    colum = colum.splice(Math.ceil(height / fontSize) + offsets[index])","}","","export function update(canvas, ctx) {","    if (words == undefined) return","","    if (lastWidth != window.innerWidth || lastHeight != innerHeight) {","        width = canvas.width = window.innerWidth","        height = canvas.height = window.innerHeight","        fillColumns()","    }","    lastWidth = window.innerWidth","    lastHeight = window.innerHeight","","    ctx.font = `${fontSize}px 'Fira Code'`","    ctx.textBaseline = 'top'","","    ctx.fillStyle = '#000'","    ctx.fillRect(0, 0, width, height)","","    columns.forEach((colum, x) => {","        colum.forEach((item, y) => {","            ctx.fillStyle = item[1]","            ctx.fillText(item[0], x * fontSize, (y - offsets[x]) * fontSize)","        })","    })","","    columns.forEach((colum, index) => {","        if (Math.random() < .1) drip(colum, index)","    })","}","","export function start(canvas) {","    width = canvas.width = window.innerWidth","    height = canvas.height = window.innerHeight","    columns = []","    offsets = []","    fillColumns()","    if (words == undefined)","        needWords = true","    else","        for (let i = 0; i < height * 2; i += fontSize)","            columns.forEach((colum, index) => drip(colum, index))","}"],"output\\backgrounds\\randomSymbols.js":["const fontSize = (/android|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini/i).test(navigator.userAgent || navigator.vendor || window.opera) ? 50 : 25","","const chars = '`~!@#$%^&*()_-+={[}]|\\\\:;\"\\'<,>.?/'.split('')","","let [width, height] = [0, 0]","","let [lastWidth, lastHeight] = [0, 0]","","let grid = [[]]","","function fillGrid(canvas,ctx) {","    width = canvas.width = window.innerWidth","    height = canvas.height = window.innerHeight","","    grid = [...grid, ...new Array(Math.ceil(width / fontSize)).fill(0).map(() => [])].splice(0, Math.ceil(width / fontSize) + 1).map(colum => [...colum, ...new Array(Math.ceil(height / fontSize)).fill(0).map(() => Math.floor(Math.random() * 255))].splice(0, Math.ceil(height / fontSize) + 1))","","    ctx.fillStyle = '#000'","    ctx.fillRect(0, 0, width, height)","    ctx.font = `${fontSize}px 'Fira Code'`","    ctx.textBaseline = 'top'","","    for (let x = 0; x < width / fontSize; x++)","        for (let y = 0; y < height / fontSize; y++) {","            ctx.fillStyle = `rgb(0,${grid[x][y]},0)`","            ctx.fillText(chars[grid[x][y] % chars.length], x * fontSize, y * fontSize)","        }","}","","export function update(canvas,ctx) {","    if (lastWidth != window.innerWidth || lastHeight != innerHeight)","        fillGrid(canvas,ctx)","    lastWidth = window.innerWidth","    lastHeight = window.innerHeight","","    ctx.font = `${fontSize}px 'Fira Code'`","    ctx.textBaseline = 'top'","","    for (let i = 0; i < Math.random() * 25; i++) {","        const x = Math.floor(Math.random() * grid.length)","        const y = Math.floor(Math.random() * grid[0].length)","        grid[x][y] = Math.floor(Math.random() * 255)","        ctx.fillStyle = '#000'","        ctx.fillRect(x * fontSize, y * fontSize, fontSize, fontSize)","        ctx.fillStyle = `rgb(0,${grid[x][y]},0)`","        ctx.fillText(chars[grid[x][y] % chars.length], x * fontSize, y * fontSize)","    }","}","","export function start(canvas,ctx) {","    fillGrid(canvas,ctx)","}","","export function stop() {","    grid = [[]]","}"],"output\\backgrounds\\uniqueCode.js":["const fontSize = (/android|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini/i).test(navigator.userAgent || navigator.vendor || window.opera) ? 50 : 25","","let [width, height] = [0, 0]","","let [lastWidth, lastHeight] = [0, 0]","","let uniqueLines, lineColors, fontWidth, numberOfUniqueLines","","function stringToNumberHash(str) {","    let hash = 0","    for (let i = 0; i < str.length; i++) {","        hash = str.charCodeAt(i) + ((hash << 5) - hash)","    }","    const maxInt32 = Math.pow(2, 31) - 1","    return (hash & maxInt32) / maxInt32","}","","","fetch('./mem.json')","    .then(response => response.json())","    .then(data => {","        uniqueLines = data.uniqueLines","        lineColors = data.uniqueLines.reduce((acc, line) => ({ ...acc, [line]: stringToNumberHash(line) * 205 + 50 }), {})","        numberOfUniqueLines = data.uniqueLines.length","    })","    .catch(error => {","        console.error('Error fetching mem for stats:', error)","    })","","const linesPerSec = fontSize == 50 ? 5 : 10","","export function update(canvas, ctx) {","    if (uniqueLines != undefined) {","        if (lastWidth != window.innerWidth || lastHeight != innerHeight) {","            width = canvas.width = window.innerWidth","            height = canvas.height = window.innerHeight","        }","        lastWidth = window.innerWidth","        lastHeight = window.innerHeight","","        ctx.font = `${fontSize}px 'Fira Code'`","        ctx.textBaseline = 'top'","","        ctx.fillStyle = '#000'","        ctx.fillRect(0, 0, canvas.width, canvas.height)","","        const lineOffset = String(numberOfUniqueLines).length * fontWidth","        const offset = Date.now() / (1000 / linesPerSec)","        const lineLength = Math.ceil((width - lineOffset) / fontWidth)","        for (let y = -1; y < height / fontSize + 1; y++) {","            const lineNumber = numberOfUniqueLines - (Math.floor(offset) - y + numberOfUniqueLines) % numberOfUniqueLines","            const line = uniqueLines[lineNumber - 1]","            const textY = (y + offset % 1) * fontSize","            ctx.fillStyle = `rgb(0,${lineColors[line]},0)`","            ctx.fillText(lineNumber, (lineOffset - String(lineNumber).length * fontWidth) / 2, textY)","            ctx.fillText(('|' + line).slice(0, lineLength), lineOffset, textY)","        }","    }","}","","export function start(canvas, ctx) {","    ctx.font = `${fontSize}px 'Fira Code'`","    fontWidth = ctx.measureText('0').width","}"],"output\\index.html":["<!DOCTYPE html>","<html lang=\"en\">","<title>Jack's project hub</title>","","<head>","    <meta charset=\"UTF-8\">","    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">","    <link rel=\"stylesheet\" href=\"./siteStyles.css\">","    <script src=\"./backgroundManager.js\"></script>","    <script src=\"./updateStats.js\"></script>","","    <!-- Primary Meta Tags -->","    <meta name=\"title\" content=\"Jack's project hub\" />","    <meta name=\"description\"","        content=\"THE place to read about all of my projects, with exclusive content not seen elsewhere!\" />","","    <!-- Open Graph / Facebook -->","    <meta property=\"og:type\" content=\"website\" />","    <meta property=\"og:url\" content=\"https://jacks-project-hub.vercel.app/\" />","    <meta property=\"og:title\" content=\"Jack's project hub\" />","    <meta property=\"og:description\"","        content=\"THE place to read about all of my projects, with exclusive content not seen elsewhere!\" />","    <meta property=\"og:image\" content=\"https://jacks-project-hub.vercel.app/preview.png\" />","","    <!-- Twitter -->","    <meta property=\"twitter:card\" content=\"summary_large_image\" />","    <meta property=\"twitter:url\" content=\"https://jacks-project-hub.vercel.app/\" />","    <meta property=\"twitter:title\" content=\"Jack's project hub\" />","    <meta property=\"twitter:description\"","        content=\"THE place to read about all of my projects, with exclusive content not seen elsewhere!\" />","    <meta property=\"twitter:image\" content=\"https://jacks-project-hub.vercel.app/preview.png\" />","</head>","","<body>","    <canvas id=\"backgroundCanvas\"></canvas>","    <div id=\"overlay\">","        <div class=\"scrollOffset\"></div>","        <div id=\"content\">","            <div id=\"info\">","                <div id=\"titleText\">","                    Jack's project hub","                </div>","                <!-- will autofill on website load -->","            </div>","            <div id=\"posts\">","                <div class=\"post\" onclick=\"window.location.href='./posts/Making a custom blog/'\">\n    <div class=\"title\">\n        \n        <div class=\"markup\" style=\"color:#fff; font-style:normal; font-weight:normal; font-size:calc(xx-large * 0.25); text-decoration: none;margin:0; padding:0; word-wrap:break-word; width:100%; height:100%;\">\n            <div style=\"text-align:center;\">Making a <span style=\"color:#0f0; font-weight:bold;\"><code>|[custom]</code></span> blog</div>\n        </div>\n        \n    </div>\n    \n        <div class=\"markup preview\" style=\"color:#0f0; font-style:normal; font-weight:normal; font-size:small; text-decoration: none;margin:0; padding:0; word-wrap:break-word; width:100%; height:100%;\">\n            <div style=\"text-align:center;\">I like to create posts, but have never found a good platform to do so.<br>Follow along as I create my own blog site, complete with custom markup, live backgrounds, and more!</div>\n        </div>\n        </div>","                <script> //Controls the grid for the posts","                    {","                        Array.from(document.getElementsByClassName('post')).forEach(post => post.style.width = Math.random() * 250 + 250 + 'px')","                        Array.from(document.getElementsByClassName('post')).forEach(post => post.style.height = Math.random() * 250 + 250 + 'px')","","                        const wrapper = document.getElementById('posts')","                        const postPadding = 10","                        const borderSize = 25","                        const updateGrid = () => {","                            const posts = Array.from(document.getElementsByClassName('post'))","                            const maxWidth = wrapper.getBoundingClientRect().width - borderSize * 2","                            Array.from(document.getElementsByClassName('post_row')).forEach(row => row.classList.add('post_row_old'))","                            let lastRowElement = document.createElement('div')","                            lastRowElement.classList.add('post_row')","                            let lastRowWidth = 0","                            for (const post of posts) {","                                const width = post.getBoundingClientRect().width + postPadding * 2","                                if (lastRowWidth === 0 || lastRowWidth + width < maxWidth) {","                                    lastRowElement.appendChild(post)","                                    lastRowWidth += width","                                }","                                else {","                                    wrapper.appendChild(lastRowElement)","                                    lastRowElement = document.createElement('div')","                                    lastRowElement.classList.add('post_row')","                                    lastRowElement.appendChild(post)","                                    lastRowWidth = width","                                }","                            }","                            wrapper.appendChild(lastRowElement)","                            Array.from(document.getElementsByClassName('post_row_old')).forEach(row => row.remove())","                        }","                        document.addEventListener('DOMContentLoaded', updateGrid)","                        window.addEventListener('resize', updateGrid)","                    }","                </script>","            </div>","            <div id=\"returnToTopButton\">","                <span onclick=\"window.scroll({top:0,left:0,behavior:'smooth'})\">Return to top</span>","            </div>","        </div>","        <div class=\"scrollOffset\"></div>","    </div>","</body>","","</html>"],"output\\postStyles.css":[":root {","    --transparentOpacity: 50%;","    --black-solid: rgb(from #000 r g b / var(--transparentOpacity));","    --black: rgb(from #0006 r g b / var(--transparentOpacity));","    --white: rgb(from #fff r g b / var(--transparentOpacity));","    --border: rgb(from #9996 r g b / var(--transparentOpacity));","    --highlight: #0f0f;","    --highlight-dark: #0f06;","    --background: rgb(from #45454582 r g b / var(--transparentOpacity));","    --background-dark: rgb(from #3336 r g b / var(--transparentOpacity));","}","","@font-face {","    font-family: 'Fira Code';","    src: url('../../firaCode.ttf') format('truetype');","    font-weight: normal;","    font-style: normal;","}","","* {","    box-sizing: border-box;","}","","html,","body {","    margin: 0;","    padding: 0;","    overflow: hidden auto;","    background-color: var(--black-solid);","    font-family: 'Fira Code';","}","","#overlay {","    position: absolute;","    top: 0;","    left: 0;","    width: 100%;","    height: calc(100vh - 5px);","    z-index: 1;","    padding: 1px;","    display: grid;","    justify-content: center;","    align-items: center;","    justify-items: center;","}","","#content {","    width: 80vw;","    background-color: var(--background-dark);","    border: 5px solid var(--highlight-dark);","    border-radius: 15px;","    padding: 10px;","    margin: 25px;","}","",".scrollOffset {","    height: 25px;","    width: 1px;","}","","@media (max-aspect-ratio: 1/1) {","    #content {","        width: 100vw;","        margin: 0;","        border-radius: 0;","    }","","    .scrollOffset {","        height: 0;","    }","}","","code {","    font-family: 'Fira Code', monospace;","    border: 2px solid var(--background-dark);","}","","#info {","    background-color: var(--background-dark);","    border: 5px solid var(--background-dark);","    border-radius: 15px 15px 0 0;","    padding: 5px;","    margin-bottom: 15px;","    text-align: center;","    color: var(--highlight);","}","","#info div {","    margin: 2.5px;","}","","","#info #return_link a {","    color: var(--highlight)","}","","#post_background {","    background-color: var(--background);","}","","#post {","    padding: 25px;","    border: 5px solid var(--background-dark);","    border-bottom: none;","    background-color: var(--black);","}","","#backgroundCanvas {","    position: fixed;","    display: block;","}","","img,","video {","    width: 100%;","    object-fit: fill;","    border: 5px solid var(--background-dark);","}","",".video_wrapper {","    filter: blur(5px) saturate(.5);","    color: transparent;","    transition: all .25s ease-in-out","}","",".video_wrapper:hover {","    filter: blur(0) saturate(1);","    color: var(--white);","}","",".video_wrapper span {","    position: absolute;","    top: 50%;","    left: 50%;","    transform: translate(-50%, -50%);","    font-size: 2em;","    text-align: center;","    width: 100%;","    height: 100%;","    display: flex;","    justify-content: center;","    align-items: center;","}","","#returnToTopButton {","    background-color: var(--background);","    border: 5px solid var(--background-dark);","    border-top: none;","    padding: 5px;","    text-align: center;","    color: var(--highlight);","    text-decoration: underline;","    border-radius: 0 0 15px 15px;","}","","#returnToTopButton span {","    cursor: pointer;","}"],"output\\siteStyles.css":[":root {","    --transparentOpacity: 50%;","    --black-solid: rgb(from #000 r g b / var(--transparentOpacity));","    --black: rgb(from #0006 r g b / var(--transparentOpacity));","    --white: rgb(from #fff r g b / var(--transparentOpacity));","    --border: rgb(from #9996 r g b / var(--transparentOpacity));","    --highlight: #0f0f;","    --highlight-dark: #0f06;","    --background: rgb(from #45454582 r g b / var(--transparentOpacity));","    --background-dark: rgb(from #3336 r g b / var(--transparentOpacity));","}","","","@font-face {","    font-family: 'Fira Code';","    src: url('./firaCode.ttf') format('truetype');","    font-weight: normal;","    font-style: normal;","}","","* {","    box-sizing: border-box;","}","","html,","body {","    margin: 0;","    padding: 0;","    overflow: hidden auto;","    background-color: var(--black-solid);","    font-family: 'Fira Code';","}","","#backgroundCanvas {","    position: fixed;","    display: block;","    transition: filter 1s ease-in-out;","}","","#backgroundCanvas.blur {","    filter: blur(25px) brightness(0);","}","","#overlay {","    position: absolute;","    top: 0;","    left: 0;","    width: 100%;","    height: calc(100vh - 5px);","    z-index: 1;","    padding: 1px;","    display: grid;","    justify-content: center;","    align-items: center;","    justify-items: center;","}","","#content {","    width: 80vw;","    background-color: var(--background-dark);","    border: 5px solid var(--highlight-dark);","    border-radius: 15px;","    padding: 10px;","    margin: 25px;","}","",".scrollOffset {","    height: 25px;","    width: 1px;","}","","@media (max-aspect-ratio: 1/1) {","    #content {","        width: 100vw;","        margin: 0;","        border-radius: 0;","    }","","    .scrollOffset {","        height: 0;","    }","}","","code {","    font-family: 'Fira Code', monospace;","    border: 2px solid var(--background-dark);","}","","#titleText {","    font-size: xx-large","}","","#info {","    background-color: var(--background-dark);","    border: 5px solid var(--background-dark);","    border-radius: 15px 15px 0 0;","    padding: 5px;","    margin-bottom: 15px;","    text-align: center;","    color: var(--highlight);","}","","#info div {","    margin: 2.5px;","}","","#posts {","    display: block;","    background-color: var(--background);","    border: 5px solid var(--background-dark);","    /* border-radius: 0 0 15px 15px; */","}","",".post_row {","    display: grid;","    grid-auto-flow: column;","    justify-content: center;","    align-items: center;","}","",".post {","    width: min-content;","    margin: 10px;","    padding: 10px;","    background-color: var(--black);","    border: 5px solid var(--border);","    color: var(--highlight);","    cursor: pointer;","    border-radius: 5px;","}","",".post .title {","    background-color: var(--black);","    padding: 5px;","    text-align: center;","    border: 2px solid var(--highlight-dark);","    margin-bottom: 10px;","    white-space: nowrap;","}","","#returnToTopButton {","    background-color: var(--background);","    border: 5px solid var(--background-dark);","    border-top: none;","    padding: 5px;","    text-align: center;","    color: var(--highlight);","    text-decoration: underline;","    border-radius: 0 0 15px 15px;","}","","#returnToTopButton span {","    cursor: pointer;","}"],"output\\updateStats.js":["function addStat(parent, text) {","    let div = document.createElement('div')","    div.innerHTML = text","    parent.appendChild(div)","}","document.addEventListener('DOMContentLoaded', () => {","    fetch('./mem.json')","        .then(response => response.json())","        .then(mem => {","            const div = document.getElementById('info')","            addStat(div, `Last updated: <code>${Math.floor((Date.now() - mem.lastUpdate) / 86400000)}</code> days ago`)","            addStat(div, `Created out of only <code>${mem.numberOfLines}</code> lines of code`)","            addStat(div, `Current hash: <code>${mem.outputHash}</code>`)","        })","        .catch(error => {","            console.error('Error fetching mem for stats:', error)","        })","})"],"postBackgroundManager.js":["document.addEventListener('DOMContentLoaded', async () => {","    const background = await import('./background.js')","    const canvas = document.getElementById('backgroundCanvas')","    const ctx = canvas.getContext('2d')","    if (background.start != undefined) await background.start(canvas, ctx)","","    const maxUps = 60","    let lastUpdate = 0","","    async function update() {","        lastUpdate = Date.now()","        const canvas = document.getElementById('backgroundCanvas')","        if (background.update != undefined) {","            await background.update(canvas, ctx)","            requestAnimationFrame(() => setTimeout(update, 1000 / maxUps - (Date.now() - lastUpdate)))","        }","    }","    update()","})"],"postStyles.css":[":root {","    --transparentOpacity: 50%;","    --black-solid: rgb(from #000 r g b / var(--transparentOpacity));","    --black: rgb(from #0006 r g b / var(--transparentOpacity));","    --white: rgb(from #fff r g b / var(--transparentOpacity));","    --border: rgb(from #9996 r g b / var(--transparentOpacity));","    --highlight: #0f0f;","    --highlight-dark: #0f06;","    --background: rgb(from #45454582 r g b / var(--transparentOpacity));","    --background-dark: rgb(from #3336 r g b / var(--transparentOpacity));","}","","@font-face {","    font-family: 'Fira Code';","    src: url('../../firaCode.ttf') format('truetype');","    font-weight: normal;","    font-style: normal;","}","","* {","    box-sizing: border-box;","}","","html,","body {","    margin: 0;","    padding: 0;","    overflow: hidden auto;","    background-color: var(--black-solid);","    font-family: 'Fira Code';","}","","#overlay {","    position: absolute;","    top: 0;","    left: 0;","    width: 100%;","    height: calc(100vh - 5px);","    z-index: 1;","    padding: 1px;","    display: grid;","    justify-content: center;","    align-items: center;","    justify-items: center;","}","","#content {","    width: 80vw;","    background-color: var(--background-dark);","    border: 5px solid var(--highlight-dark);","    border-radius: 15px;","    padding: 10px;","    margin: 25px;","}","",".scrollOffset {","    height: 25px;","    width: 1px;","}","","@media (max-aspect-ratio: 1/1) {","    #content {","        width: 100vw;","        margin: 0;","        border-radius: 0;","    }","","    .scrollOffset {","        height: 0;","    }","}","","code {","    font-family: 'Fira Code', monospace;","    border: 2px solid var(--background-dark);","}","","#info {","    background-color: var(--background-dark);","    border: 5px solid var(--background-dark);","    border-radius: 15px 15px 0 0;","    padding: 5px;","    margin-bottom: 15px;","    text-align: center;","    color: var(--highlight);","}","","#info div {","    margin: 2.5px;","}","","","#info #return_link a {","    color: var(--highlight)","}","","#post_background {","    background-color: var(--background);","}","","#post {","    padding: 25px;","    border: 5px solid var(--background-dark);","    border-bottom: none;","    background-color: var(--black);","}","","#backgroundCanvas {","    position: fixed;","    display: block;","}","","img,","video {","    width: 100%;","    object-fit: fill;","    border: 5px solid var(--background-dark);","}","",".video_wrapper {","    filter: blur(5px) saturate(.5);","    color: transparent;","    transition: all .25s ease-in-out","}","",".video_wrapper:hover {","    filter: blur(0) saturate(1);","    color: var(--white);","}","",".video_wrapper span {","    position: absolute;","    top: 50%;","    left: 50%;","    transform: translate(-50%, -50%);","    font-size: 2em;","    text-align: center;","    width: 100%;","    height: 100%;","    display: flex;","    justify-content: center;","    align-items: center;","}","","#returnToTopButton {","    background-color: var(--background);","    border: 5px solid var(--background-dark);","    border-top: none;","    padding: 5px;","    text-align: center;","    color: var(--highlight);","    text-decoration: underline;","    border-radius: 0 0 15px 15px;","}","","#returnToTopButton span {","    cursor: pointer;","}"],"siteBackgroundManager.js":["document.addEventListener('DOMContentLoaded', async () => {","    function mixPaths() {","        const lastPath = backgroundPaths[backgroundPaths.length - 1]","        do backgroundPaths.sort(() => Math.random() * 2 - 1)","        while (backgroundPaths.length > 1 && backgroundPaths[0] == lastPath)","    }","    mixPaths()","","    let backgroundIndex = -1","","    const minTimePerBackground = 1000 * 30","    const blurTime = 1000 * 1","    let backgroundStarted = 0","","    let blurred = false","","    let cycle = true","","    let currentBackground = {}","","    let loadedBackgrounds = []","","    const maxUps = 60","    let lastUpdate = 0","","    async function update() {","        lastUpdate = Date.now()","","        const canvas = document.getElementById('backgroundCanvas')","        const ctx = canvas.getContext('2d')","","        if (cycle && minTimePerBackground - (Date.now() - backgroundStarted) <= blurTime && !blurred) {","            canvas.classList.add('blur')","            blurred = true","        }","","        if (cycle && Date.now() - backgroundStarted >= minTimePerBackground) {","            if (currentBackground.stop != undefined) await currentBackground.stop(canvas, ctx)","            backgroundIndex = (backgroundIndex + 1) % backgroundPaths.length","            if (backgroundIndex == 0) mixPaths()","            if (!loadedBackgrounds.includes(backgroundPaths[backgroundIndex])) await new Promise(r => {","                const script = document.createElement('script')","                script.type = 'module'","                script.src = backgroundPaths[backgroundIndex]","                script.onload = r","                document.head.appendChild(script)","                loadedBackgrounds.push(backgroundPaths[backgroundIndex])","            })","            currentBackground = await import(backgroundPaths[backgroundIndex])","            if (currentBackground.start != undefined) await currentBackground.start(canvas, ctx)","            canvas.classList.remove('blur')","            blurred = false","            backgroundStarted = Date.now()","        }","        if (currentBackground.update != undefined) await currentBackground.update(canvas, ctx)","","        //has to be set after the first update so the first background will always get loaded","        cycle = (backgroundPaths.length > 1)","","        requestAnimationFrame(() => setTimeout(update, 1000 / maxUps - (Date.now() - lastUpdate)))","    }","    update()","})"],"siteStyles.css":[":root {","    --transparentOpacity: 50%;","    --black-solid: rgb(from #000 r g b / var(--transparentOpacity));","    --black: rgb(from #0006 r g b / var(--transparentOpacity));","    --white: rgb(from #fff r g b / var(--transparentOpacity));","    --border: rgb(from #9996 r g b / var(--transparentOpacity));","    --highlight: #0f0f;","    --highlight-dark: #0f06;","    --background: rgb(from #45454582 r g b / var(--transparentOpacity));","    --background-dark: rgb(from #3336 r g b / var(--transparentOpacity));","}","","","@font-face {","    font-family: 'Fira Code';","    src: url('./firaCode.ttf') format('truetype');","    font-weight: normal;","    font-style: normal;","}","","* {","    box-sizing: border-box;","}","","html,","body {","    margin: 0;","    padding: 0;","    overflow: hidden auto;","    background-color: var(--black-solid);","    font-family: 'Fira Code';","}","","#backgroundCanvas {","    position: fixed;","    display: block;","    transition: filter 1s ease-in-out;","}","","#backgroundCanvas.blur {","    filter: blur(25px) brightness(0);","}","","#overlay {","    position: absolute;","    top: 0;","    left: 0;","    width: 100%;","    height: calc(100vh - 5px);","    z-index: 1;","    padding: 1px;","    display: grid;","    justify-content: center;","    align-items: center;","    justify-items: center;","}","","#content {","    width: 80vw;","    background-color: var(--background-dark);","    border: 5px solid var(--highlight-dark);","    border-radius: 15px;","    padding: 10px;","    margin: 25px;","}","",".scrollOffset {","    height: 25px;","    width: 1px;","}","","@media (max-aspect-ratio: 1/1) {","    #content {","        width: 100vw;","        margin: 0;","        border-radius: 0;","    }","","    .scrollOffset {","        height: 0;","    }","}","","code {","    font-family: 'Fira Code', monospace;","    border: 2px solid var(--background-dark);","}","","#titleText {","    font-size: xx-large","}","","#info {","    background-color: var(--background-dark);","    border: 5px solid var(--background-dark);","    border-radius: 15px 15px 0 0;","    padding: 5px;","    margin-bottom: 15px;","    text-align: center;","    color: var(--highlight);","}","","#info div {","    margin: 2.5px;","}","","#posts {","    display: block;","    background-color: var(--background);","    border: 5px solid var(--background-dark);","    /* border-radius: 0 0 15px 15px; */","}","",".post_row {","    display: grid;","    grid-auto-flow: column;","    justify-content: center;","    align-items: center;","}","",".post {","    width: min-content;","    margin: 10px;","    padding: 10px;","    background-color: var(--black);","    border: 5px solid var(--border);","    color: var(--highlight);","    cursor: pointer;","    border-radius: 5px;","}","",".post .title {","    background-color: var(--black);","    padding: 5px;","    text-align: center;","    border: 2px solid var(--highlight-dark);","    margin-bottom: 10px;","    white-space: nowrap;","}","","#returnToTopButton {","    background-color: var(--background);","    border: 5px solid var(--background-dark);","    border-top: none;","    padding: 5px;","    text-align: center;","    color: var(--highlight);","    text-decoration: underline;","    border-radius: 0 0 15px 15px;","}","","#returnToTopButton span {","    cursor: pointer;","}"],"updateHomeStats.js":["function addStat(parent, text) {","    let div = document.createElement('div')","    div.innerHTML = text","    parent.appendChild(div)","}","document.addEventListener('DOMContentLoaded', () => {","    fetch('./mem.json')","        .then(response => response.json())","        .then(mem => {","            const div = document.getElementById('info')","            addStat(div, `Last updated: <code>${Math.floor((Date.now() - mem.lastUpdate) / 86400000)}</code> days ago`)","            addStat(div, `Created out of only <code>${mem.numberOfLines}</code> lines of code`)","            addStat(div, `Current hash: <code>${mem.outputHash}</code>`)","        })","        .catch(error => {","            console.error('Error fetching mem for stats:', error)","        })","})"],"updatePostStats.js":["const script = document.currentScript","const addStat = text => {","    const div = document.createElement('div')","    div.innerHTML = text","    script.insertAdjacentElement('afterend', div)","}","document.addEventListener('DOMContentLoaded', () => {","    fetch('../../mem.json')","        .then(response => response.json())","        .then(mem => {","            addStat(`First published: <code>${Math.floor((Date.now() - mem.postsCreated[postName]) / 86400000)}</code> days ago`)","            addStat(`Last updated: <code>${Math.floor((Date.now() - mem.postsUpdated[postName]) / 86400000)}</code> days ago`)","            addStat(`Current hash: <code>${mem.postHashes[postName]}</code>`)","        })","        .catch(error => {","            console.error('Error fetching mem for stats:', error)","        })","})"]},"postsUpdated":{"Making a custom blog":1722274291045,"Making a custom blog copy":1721675159084},"postsCreated":{"Making a custom blog":1717538615782,"Making a custom blog copy":1719177118821},"postHashes":{"Making a custom blog":"9989287e4bc55a978ccc8a81c30d328e"}}